<?php
/**
 * BatchOfferItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kanastra Tech Hub
 *
 * The Kanastra Tech Hub solution is an API/application that ease the integration between parties of credit operations in general. From the credit originator, to the investor, until the debt collector and auditing processes.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: tech@kanastra.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BatchOfferItems Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BatchOfferItems implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BatchOffer_items';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'external_id' => 'string',
        'sponsor_name' => 'string',
        'sponsor_person_type' => 'string',
        'sponsor_government_id' => 'string',
        'sponsor_external_code' => 'string',
        'sponsor_address' => 'string',
        'sponsor_address_number' => 'string',
        'sponsor_address_complement' => 'string',
        'sponsor_neighborhood' => 'string',
        'sponsor_city' => 'string',
        'sponsor_state' => 'string',
        'sponsor_country' => 'string',
        'sponsor_zip_code' => 'string',
        'sponsor_bank' => 'string',
        'sponsor_agency' => 'string',
        'sponsor_agency_digit' => 'string',
        'sponsor_account' => 'string',
        'sponsor_account_digit' => 'string',
        'sponsor_pix_key' => 'string',
        'asset_type' => 'string',
        'invoice_number' => 'string',
        'invoice_date' => 'string',
        'invoice_key' => 'string',
        'total_installments' => 'float',
        'payment_value' => 'float',
        'payment_date' => 'string',
        'custom_fields' => 'object',
        'files' => '\Swagger\Client\Model\OfferFile',
        'installments' => '\Swagger\Client\Model\OfferInstallments[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'external_id' => null,
        'sponsor_name' => null,
        'sponsor_person_type' => null,
        'sponsor_government_id' => null,
        'sponsor_external_code' => null,
        'sponsor_address' => null,
        'sponsor_address_number' => null,
        'sponsor_address_complement' => null,
        'sponsor_neighborhood' => null,
        'sponsor_city' => null,
        'sponsor_state' => null,
        'sponsor_country' => null,
        'sponsor_zip_code' => null,
        'sponsor_bank' => null,
        'sponsor_agency' => null,
        'sponsor_agency_digit' => null,
        'sponsor_account' => null,
        'sponsor_account_digit' => null,
        'sponsor_pix_key' => null,
        'asset_type' => null,
        'invoice_number' => null,
        'invoice_date' => null,
        'invoice_key' => null,
        'total_installments' => null,
        'payment_value' => null,
        'payment_date' => null,
        'custom_fields' => null,
        'files' => null,
        'installments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_id' => 'externalId',
        'sponsor_name' => 'sponsorName',
        'sponsor_person_type' => 'sponsorPersonType',
        'sponsor_government_id' => 'sponsorGovernmentId',
        'sponsor_external_code' => 'sponsorExternalCode',
        'sponsor_address' => 'sponsorAddress',
        'sponsor_address_number' => 'sponsorAddressNumber',
        'sponsor_address_complement' => 'sponsorAddressComplement',
        'sponsor_neighborhood' => 'sponsorNeighborhood',
        'sponsor_city' => 'sponsorCity',
        'sponsor_state' => 'sponsorState',
        'sponsor_country' => 'sponsorCountry',
        'sponsor_zip_code' => 'sponsorZipCode',
        'sponsor_bank' => 'sponsorBank',
        'sponsor_agency' => 'sponsorAgency',
        'sponsor_agency_digit' => 'sponsorAgencyDigit',
        'sponsor_account' => 'sponsorAccount',
        'sponsor_account_digit' => 'sponsorAccountDigit',
        'sponsor_pix_key' => 'sponsorPixKey',
        'asset_type' => 'assetType',
        'invoice_number' => 'invoiceNumber',
        'invoice_date' => 'invoiceDate',
        'invoice_key' => 'invoiceKey',
        'total_installments' => 'totalInstallments',
        'payment_value' => 'paymentValue',
        'payment_date' => 'paymentDate',
        'custom_fields' => 'customFields',
        'files' => 'files',
        'installments' => 'installments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_id' => 'setExternalId',
        'sponsor_name' => 'setSponsorName',
        'sponsor_person_type' => 'setSponsorPersonType',
        'sponsor_government_id' => 'setSponsorGovernmentId',
        'sponsor_external_code' => 'setSponsorExternalCode',
        'sponsor_address' => 'setSponsorAddress',
        'sponsor_address_number' => 'setSponsorAddressNumber',
        'sponsor_address_complement' => 'setSponsorAddressComplement',
        'sponsor_neighborhood' => 'setSponsorNeighborhood',
        'sponsor_city' => 'setSponsorCity',
        'sponsor_state' => 'setSponsorState',
        'sponsor_country' => 'setSponsorCountry',
        'sponsor_zip_code' => 'setSponsorZipCode',
        'sponsor_bank' => 'setSponsorBank',
        'sponsor_agency' => 'setSponsorAgency',
        'sponsor_agency_digit' => 'setSponsorAgencyDigit',
        'sponsor_account' => 'setSponsorAccount',
        'sponsor_account_digit' => 'setSponsorAccountDigit',
        'sponsor_pix_key' => 'setSponsorPixKey',
        'asset_type' => 'setAssetType',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_date' => 'setInvoiceDate',
        'invoice_key' => 'setInvoiceKey',
        'total_installments' => 'setTotalInstallments',
        'payment_value' => 'setPaymentValue',
        'payment_date' => 'setPaymentDate',
        'custom_fields' => 'setCustomFields',
        'files' => 'setFiles',
        'installments' => 'setInstallments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_id' => 'getExternalId',
        'sponsor_name' => 'getSponsorName',
        'sponsor_person_type' => 'getSponsorPersonType',
        'sponsor_government_id' => 'getSponsorGovernmentId',
        'sponsor_external_code' => 'getSponsorExternalCode',
        'sponsor_address' => 'getSponsorAddress',
        'sponsor_address_number' => 'getSponsorAddressNumber',
        'sponsor_address_complement' => 'getSponsorAddressComplement',
        'sponsor_neighborhood' => 'getSponsorNeighborhood',
        'sponsor_city' => 'getSponsorCity',
        'sponsor_state' => 'getSponsorState',
        'sponsor_country' => 'getSponsorCountry',
        'sponsor_zip_code' => 'getSponsorZipCode',
        'sponsor_bank' => 'getSponsorBank',
        'sponsor_agency' => 'getSponsorAgency',
        'sponsor_agency_digit' => 'getSponsorAgencyDigit',
        'sponsor_account' => 'getSponsorAccount',
        'sponsor_account_digit' => 'getSponsorAccountDigit',
        'sponsor_pix_key' => 'getSponsorPixKey',
        'asset_type' => 'getAssetType',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_date' => 'getInvoiceDate',
        'invoice_key' => 'getInvoiceKey',
        'total_installments' => 'getTotalInstallments',
        'payment_value' => 'getPaymentValue',
        'payment_date' => 'getPaymentDate',
        'custom_fields' => 'getCustomFields',
        'files' => 'getFiles',
        'installments' => 'getInstallments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['sponsor_name'] = isset($data['sponsor_name']) ? $data['sponsor_name'] : null;
        $this->container['sponsor_person_type'] = isset($data['sponsor_person_type']) ? $data['sponsor_person_type'] : null;
        $this->container['sponsor_government_id'] = isset($data['sponsor_government_id']) ? $data['sponsor_government_id'] : null;
        $this->container['sponsor_external_code'] = isset($data['sponsor_external_code']) ? $data['sponsor_external_code'] : null;
        $this->container['sponsor_address'] = isset($data['sponsor_address']) ? $data['sponsor_address'] : null;
        $this->container['sponsor_address_number'] = isset($data['sponsor_address_number']) ? $data['sponsor_address_number'] : null;
        $this->container['sponsor_address_complement'] = isset($data['sponsor_address_complement']) ? $data['sponsor_address_complement'] : null;
        $this->container['sponsor_neighborhood'] = isset($data['sponsor_neighborhood']) ? $data['sponsor_neighborhood'] : null;
        $this->container['sponsor_city'] = isset($data['sponsor_city']) ? $data['sponsor_city'] : null;
        $this->container['sponsor_state'] = isset($data['sponsor_state']) ? $data['sponsor_state'] : null;
        $this->container['sponsor_country'] = isset($data['sponsor_country']) ? $data['sponsor_country'] : null;
        $this->container['sponsor_zip_code'] = isset($data['sponsor_zip_code']) ? $data['sponsor_zip_code'] : null;
        $this->container['sponsor_bank'] = isset($data['sponsor_bank']) ? $data['sponsor_bank'] : null;
        $this->container['sponsor_agency'] = isset($data['sponsor_agency']) ? $data['sponsor_agency'] : null;
        $this->container['sponsor_agency_digit'] = isset($data['sponsor_agency_digit']) ? $data['sponsor_agency_digit'] : null;
        $this->container['sponsor_account'] = isset($data['sponsor_account']) ? $data['sponsor_account'] : null;
        $this->container['sponsor_account_digit'] = isset($data['sponsor_account_digit']) ? $data['sponsor_account_digit'] : null;
        $this->container['sponsor_pix_key'] = isset($data['sponsor_pix_key']) ? $data['sponsor_pix_key'] : null;
        $this->container['asset_type'] = isset($data['asset_type']) ? $data['asset_type'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['invoice_key'] = isset($data['invoice_key']) ? $data['invoice_key'] : null;
        $this->container['total_installments'] = isset($data['total_installments']) ? $data['total_installments'] : null;
        $this->container['payment_value'] = isset($data['payment_value']) ? $data['payment_value'] : null;
        $this->container['payment_date'] = isset($data['payment_date']) ? $data['payment_date'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['installments'] = isset($data['installments']) ? $data['installments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id Unique external identifier (for the originator control).  ----  Identificador único externo (para controle do originador).
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets sponsor_name
     *
     * @return string
     */
    public function getSponsorName()
    {
        return $this->container['sponsor_name'];
    }

    /**
     * Sets sponsor_name
     *
     * @param string $sponsor_name Sponsor name or sponsor company name. The person/company that will pay for this offer.  ----  Razão Social ou Nome do sacado. A pessoa/empresa que irá pagar por esta oferta.
     *
     * @return $this
     */
    public function setSponsorName($sponsor_name)
    {
        $this->container['sponsor_name'] = $sponsor_name;

        return $this;
    }

    /**
     * Gets sponsor_person_type
     *
     * @return string
     */
    public function getSponsorPersonType()
    {
        return $this->container['sponsor_person_type'];
    }

    /**
     * Sets sponsor_person_type
     *
     * @param string $sponsor_person_type Sponsor person type. It can be: `LEGAL_PERSON` - Company `NATURAL_PERSON` - Individual person ---- Tipo de entidade do sacado. Valores possíveis são: `LEGAL_PERSON` - Pessoa jurídica `NATURAL_PERSON` - Pessoa física
     *
     * @return $this
     */
    public function setSponsorPersonType($sponsor_person_type)
    {
        $this->container['sponsor_person_type'] = $sponsor_person_type;

        return $this;
    }

    /**
     * Gets sponsor_government_id
     *
     * @return string
     */
    public function getSponsorGovernmentId()
    {
        return $this->container['sponsor_government_id'];
    }

    /**
     * Sets sponsor_government_id
     *
     * @param string $sponsor_government_id Sponsor's Government tax ID (a.k.a. CNPJ or CPF). Just numbers.  ----  CNPJ ou CPF do sacado. Apenas números.
     *
     * @return $this
     */
    public function setSponsorGovernmentId($sponsor_government_id)
    {
        $this->container['sponsor_government_id'] = $sponsor_government_id;

        return $this;
    }

    /**
     * Gets sponsor_external_code
     *
     * @return string
     */
    public function getSponsorExternalCode()
    {
        return $this->container['sponsor_external_code'];
    }

    /**
     * Sets sponsor_external_code
     *
     * @param string $sponsor_external_code External code of the sponsor (for the originator control).  ----  Código externo do sacado (para controle do originador).
     *
     * @return $this
     */
    public function setSponsorExternalCode($sponsor_external_code)
    {
        $this->container['sponsor_external_code'] = $sponsor_external_code;

        return $this;
    }

    /**
     * Gets sponsor_address
     *
     * @return string
     */
    public function getSponsorAddress()
    {
        return $this->container['sponsor_address'];
    }

    /**
     * Sets sponsor_address
     *
     * @param string $sponsor_address Address of the sponsor.  ----  Endereço do sacado.
     *
     * @return $this
     */
    public function setSponsorAddress($sponsor_address)
    {
        $this->container['sponsor_address'] = $sponsor_address;

        return $this;
    }

    /**
     * Gets sponsor_address_number
     *
     * @return string
     */
    public function getSponsorAddressNumber()
    {
        return $this->container['sponsor_address_number'];
    }

    /**
     * Sets sponsor_address_number
     *
     * @param string $sponsor_address_number Address number of sponsor.  ----  Número do endereço do sacado.
     *
     * @return $this
     */
    public function setSponsorAddressNumber($sponsor_address_number)
    {
        $this->container['sponsor_address_number'] = $sponsor_address_number;

        return $this;
    }

    /**
     * Gets sponsor_address_complement
     *
     * @return string
     */
    public function getSponsorAddressComplement()
    {
        return $this->container['sponsor_address_complement'];
    }

    /**
     * Sets sponsor_address_complement
     *
     * @param string $sponsor_address_complement Sponsor address complement.  ----  Complemento do endereço do sacado.
     *
     * @return $this
     */
    public function setSponsorAddressComplement($sponsor_address_complement)
    {
        $this->container['sponsor_address_complement'] = $sponsor_address_complement;

        return $this;
    }

    /**
     * Gets sponsor_neighborhood
     *
     * @return string
     */
    public function getSponsorNeighborhood()
    {
        return $this->container['sponsor_neighborhood'];
    }

    /**
     * Sets sponsor_neighborhood
     *
     * @param string $sponsor_neighborhood Neighborhood of the sponsor.  ----  Bairro do sacado.
     *
     * @return $this
     */
    public function setSponsorNeighborhood($sponsor_neighborhood)
    {
        $this->container['sponsor_neighborhood'] = $sponsor_neighborhood;

        return $this;
    }

    /**
     * Gets sponsor_city
     *
     * @return string
     */
    public function getSponsorCity()
    {
        return $this->container['sponsor_city'];
    }

    /**
     * Sets sponsor_city
     *
     * @param string $sponsor_city Sponsor's city.  ----  Cidade do sacado.
     *
     * @return $this
     */
    public function setSponsorCity($sponsor_city)
    {
        $this->container['sponsor_city'] = $sponsor_city;

        return $this;
    }

    /**
     * Gets sponsor_state
     *
     * @return string
     */
    public function getSponsorState()
    {
        return $this->container['sponsor_state'];
    }

    /**
     * Sets sponsor_state
     *
     * @param string $sponsor_state Sponsor's state.  ----  Estado do sacado.
     *
     * @return $this
     */
    public function setSponsorState($sponsor_state)
    {
        $this->container['sponsor_state'] = $sponsor_state;

        return $this;
    }

    /**
     * Gets sponsor_country
     *
     * @return string
     */
    public function getSponsorCountry()
    {
        return $this->container['sponsor_country'];
    }

    /**
     * Sets sponsor_country
     *
     * @param string $sponsor_country Sponsor's country.  ----  País do sacado.
     *
     * @return $this
     */
    public function setSponsorCountry($sponsor_country)
    {
        $this->container['sponsor_country'] = $sponsor_country;

        return $this;
    }

    /**
     * Gets sponsor_zip_code
     *
     * @return string
     */
    public function getSponsorZipCode()
    {
        return $this->container['sponsor_zip_code'];
    }

    /**
     * Sets sponsor_zip_code
     *
     * @param string $sponsor_zip_code Sponsor's zip code.  ----  CEP do sacado.
     *
     * @return $this
     */
    public function setSponsorZipCode($sponsor_zip_code)
    {
        $this->container['sponsor_zip_code'] = $sponsor_zip_code;

        return $this;
    }

    /**
     * Gets sponsor_bank
     *
     * @return string
     */
    public function getSponsorBank()
    {
        return $this->container['sponsor_bank'];
    }

    /**
     * Sets sponsor_bank
     *
     * @param string $sponsor_bank Sponsor's bank code (brazilian format). For reference: [https://bank.codes/numero-do-banco/bank/page/2/](https://bank.codes/numero-do-banco/bank/page/2/)  ----  Código do banco do sacado.
     *
     * @return $this
     */
    public function setSponsorBank($sponsor_bank)
    {
        $this->container['sponsor_bank'] = $sponsor_bank;

        return $this;
    }

    /**
     * Gets sponsor_agency
     *
     * @return string
     */
    public function getSponsorAgency()
    {
        return $this->container['sponsor_agency'];
    }

    /**
     * Sets sponsor_agency
     *
     * @param string $sponsor_agency Sponsor's bank agency code (without last digit).  ----  Código da agência bancária do sacado (Sem o dígito).
     *
     * @return $this
     */
    public function setSponsorAgency($sponsor_agency)
    {
        $this->container['sponsor_agency'] = $sponsor_agency;

        return $this;
    }

    /**
     * Gets sponsor_agency_digit
     *
     * @return string
     */
    public function getSponsorAgencyDigit()
    {
        return $this->container['sponsor_agency_digit'];
    }

    /**
     * Sets sponsor_agency_digit
     *
     * @param string $sponsor_agency_digit Sponsor's bank agency last digit.  ----  Dígito da agência bancária do sacado.
     *
     * @return $this
     */
    public function setSponsorAgencyDigit($sponsor_agency_digit)
    {
        $this->container['sponsor_agency_digit'] = $sponsor_agency_digit;

        return $this;
    }

    /**
     * Gets sponsor_account
     *
     * @return string
     */
    public function getSponsorAccount()
    {
        return $this->container['sponsor_account'];
    }

    /**
     * Sets sponsor_account
     *
     * @param string $sponsor_account Sponsor's bank account code (without last digit).  ----  Conta corrente do sacado (Sem o dígito).
     *
     * @return $this
     */
    public function setSponsorAccount($sponsor_account)
    {
        $this->container['sponsor_account'] = $sponsor_account;

        return $this;
    }

    /**
     * Gets sponsor_account_digit
     *
     * @return string
     */
    public function getSponsorAccountDigit()
    {
        return $this->container['sponsor_account_digit'];
    }

    /**
     * Sets sponsor_account_digit
     *
     * @param string $sponsor_account_digit Sponsor's bank account last digit.  ----  Dígito da conta corrente do sacado.
     *
     * @return $this
     */
    public function setSponsorAccountDigit($sponsor_account_digit)
    {
        $this->container['sponsor_account_digit'] = $sponsor_account_digit;

        return $this;
    }

    /**
     * Gets sponsor_pix_key
     *
     * @return string
     */
    public function getSponsorPixKey()
    {
        return $this->container['sponsor_pix_key'];
    }

    /**
     * Sets sponsor_pix_key
     *
     * @param string $sponsor_pix_key Sponsor's pix key.  ----  Chave pix do sacado.
     *
     * @return $this
     */
    public function setSponsorPixKey($sponsor_pix_key)
    {
        $this->container['sponsor_pix_key'] = $sponsor_pix_key;

        return $this;
    }

    /**
     * Gets asset_type
     *
     * @return string
     */
    public function getAssetType()
    {
        return $this->container['asset_type'];
    }

    /**
     * Sets asset_type
     *
     * @param string $asset_type Asset type. It can be:   - `DUPLICATA_MERCANTIL` - Mercantile duplicate  - `CHEQUE` - Check  - `CONTRATO_DIGITAL` - Digital contract  - `CONTRATO_FISICO` - Physical contract  - `MULTIPLOS` - Multiple  - `NOTA_SERVICOS` - Brazilian services invoice  - `CARTAO_CREDITO` - Credit card  - `DIREITOS_CREDITORIOS` - Debt rights  - `ARRANJO_PAGAMENTO` - Payment scheme  - `NOTA_COMERCIAL` - Commercial note  - `ASSISTENCIA_FINANCEIRA` - Financial Assistance  ---- Tipo do ativo. Valores possíveis são:   - `DUPLICATA_MERCANTIL` - Duplicata mercantil  - `CHEQUE` - Cheque  - `CONTRATO_DIGITAL` - Contrato digital  - `CONTRATO_FISICO` - Contrato físico  - `MULTIPLOS` - Múltiplos  - `NOTA_SERVICOS` - Nota Fiscal de Serviço  - `CARTAO_CREDITO` - Cartão de Crédito  - `DIREITOS_CREDITORIOS` - Direitos Creditórios  - `ARRANJO_PAGAMENTO` - Arranjo de pagamento  - `NOTA_COMERCIAL` - Nota comercial  - `ASSISTENCIA_FINANCEIRA` - Assistência Financeira
     *
     * @return $this
     */
    public function setAssetType($asset_type)
    {
        $this->container['asset_type'] = $asset_type;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number Invoice number  ----  Número do título.
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return string
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param string $invoice_date Invoice date (format `YYYYMMDD`).  ----  Data do título (Formato `YYYYMMDD`).
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets invoice_key
     *
     * @return string
     */
    public function getInvoiceKey()
    {
        return $this->container['invoice_key'];
    }

    /**
     * Sets invoice_key
     *
     * @param string $invoice_key Electronic key of the invoice (usually for brazilian invoices only, for validation purposes).  ----  Chave eletrônica do título.
     *
     * @return $this
     */
    public function setInvoiceKey($invoice_key)
    {
        $this->container['invoice_key'] = $invoice_key;

        return $this;
    }

    /**
     * Gets total_installments
     *
     * @return float
     */
    public function getTotalInstallments()
    {
        return $this->container['total_installments'];
    }

    /**
     * Sets total_installments
     *
     * @param float $total_installments Total of monthly installments that this invoice will be divided into. Used only when the invoice will be divided into 2 or more monthly payments. When is a one payment only (bullet), the default is 1.  ----  Total de parcelas referente ao título. Utilizado apenas quando o título é pago de forma parcelada. Quando é pago de forma à vista o valor default é 1.
     *
     * @return $this
     */
    public function setTotalInstallments($total_installments)
    {
        $this->container['total_installments'] = $total_installments;

        return $this;
    }

    /**
     * Gets payment_value
     *
     * @return float
     */
    public function getPaymentValue()
    {
        return $this->container['payment_value'];
    }

    /**
     * Sets payment_value
     *
     * @param float $payment_value Amount of the invoice (in BRL).  ----  Valor do título (em BRL).
     *
     * @return $this
     */
    public function setPaymentValue($payment_value)
    {
        $this->container['payment_value'] = $payment_value;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return string
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param string $payment_date The due date of the first installment. (Format: `YYYYMMDD`). It needs to be at least 2 business days after today.  ----  Data do vencimento da primeira parcela do título. Formato: YYYYMMDD Tem que ser pelo menos 2 dias pra frente.
     *
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object $custom_fields This field can be an object containing information agreed and required by the regulation of the fund and that's also very specific to the fund business model.  ----  Espaço para especificar informações acordadas no regulamento p/ validar condições de cessão e/ou critério de elegibilidade.
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Swagger\Client\Model\OfferFile
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Swagger\Client\Model\OfferFile $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \Swagger\Client\Model\OfferInstallments[]
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \Swagger\Client\Model\OfferInstallments[] $installments A list of installments and their attributes.  ---  Uma lista contendo as parcelas e seus atributos.
     *
     * @return $this
     */
    public function setInstallments($installments)
    {
        $this->container['installments'] = $installments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
