<?php
/**
 * OfferDetailsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kanastra Tech Hub
 *
 * The Kanastra Tech Hub solution is an API/application that ease the integration between parties of credit operations in general. From the credit originator, to the investor, until the debt collector and auditing processes.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: tech@kanastra.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OfferDetailsResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfferDetailsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OfferDetailsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'status' => 'string',
        'buyer_id' => 'string',
        'sponsor_id' => 'string',
        'seller_id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'credit_originator_id' => 'float',
        'external_id' => 'string',
        'daily_discount_rate' => 'float',
        'daily_discount_rate_observations' => 'string',
        'daily_discount_rate_calculator' => 'string',
        'daily_discount_rate_calculated_at' => '\DateTime',
        'daily_discount_rate_apply_on' => 'string',
        'payment_value' => 'float',
        'installments' => 'object[]',
        'validations' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'status' => null,
        'buyer_id' => null,
        'sponsor_id' => null,
        'seller_id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'credit_originator_id' => null,
        'external_id' => null,
        'daily_discount_rate' => null,
        'daily_discount_rate_observations' => null,
        'daily_discount_rate_calculator' => null,
        'daily_discount_rate_calculated_at' => 'date-time',
        'daily_discount_rate_apply_on' => null,
        'payment_value' => null,
        'installments' => null,
        'validations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'buyer_id' => 'buyer_id',
        'sponsor_id' => 'sponsor_id',
        'seller_id' => 'seller_id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'credit_originator_id' => 'credit_originator_id',
        'external_id' => 'external_id',
        'daily_discount_rate' => 'daily_discount_rate',
        'daily_discount_rate_observations' => 'daily_discount_rate_observations',
        'daily_discount_rate_calculator' => 'daily_discount_rate_calculator',
        'daily_discount_rate_calculated_at' => 'daily_discount_rate_calculated_at',
        'daily_discount_rate_apply_on' => 'daily_discount_rate_apply_on',
        'payment_value' => 'payment_value',
        'installments' => 'installments',
        'validations' => 'validations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'buyer_id' => 'setBuyerId',
        'sponsor_id' => 'setSponsorId',
        'seller_id' => 'setSellerId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'credit_originator_id' => 'setCreditOriginatorId',
        'external_id' => 'setExternalId',
        'daily_discount_rate' => 'setDailyDiscountRate',
        'daily_discount_rate_observations' => 'setDailyDiscountRateObservations',
        'daily_discount_rate_calculator' => 'setDailyDiscountRateCalculator',
        'daily_discount_rate_calculated_at' => 'setDailyDiscountRateCalculatedAt',
        'daily_discount_rate_apply_on' => 'setDailyDiscountRateApplyOn',
        'payment_value' => 'setPaymentValue',
        'installments' => 'setInstallments',
        'validations' => 'setValidations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'buyer_id' => 'getBuyerId',
        'sponsor_id' => 'getSponsorId',
        'seller_id' => 'getSellerId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'credit_originator_id' => 'getCreditOriginatorId',
        'external_id' => 'getExternalId',
        'daily_discount_rate' => 'getDailyDiscountRate',
        'daily_discount_rate_observations' => 'getDailyDiscountRateObservations',
        'daily_discount_rate_calculator' => 'getDailyDiscountRateCalculator',
        'daily_discount_rate_calculated_at' => 'getDailyDiscountRateCalculatedAt',
        'daily_discount_rate_apply_on' => 'getDailyDiscountRateApplyOn',
        'payment_value' => 'getPaymentValue',
        'installments' => 'getInstallments',
        'validations' => 'getValidations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_SAVED = 'saved';
    const STATUS_PRE_VALIDATED = 'pre-validated';
    const STATUS_VALIDATED = 'validated';
    const STATUS_BATCHED = 'batched';
    const STATUS_INVALID = 'invalid';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SAVED,
            self::STATUS_PRE_VALIDATED,
            self::STATUS_VALIDATED,
            self::STATUS_BATCHED,
            self::STATUS_INVALID,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['buyer_id'] = isset($data['buyer_id']) ? $data['buyer_id'] : null;
        $this->container['sponsor_id'] = isset($data['sponsor_id']) ? $data['sponsor_id'] : null;
        $this->container['seller_id'] = isset($data['seller_id']) ? $data['seller_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['credit_originator_id'] = isset($data['credit_originator_id']) ? $data['credit_originator_id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['daily_discount_rate'] = isset($data['daily_discount_rate']) ? $data['daily_discount_rate'] : null;
        $this->container['daily_discount_rate_observations'] = isset($data['daily_discount_rate_observations']) ? $data['daily_discount_rate_observations'] : null;
        $this->container['daily_discount_rate_calculator'] = isset($data['daily_discount_rate_calculator']) ? $data['daily_discount_rate_calculator'] : null;
        $this->container['daily_discount_rate_calculated_at'] = isset($data['daily_discount_rate_calculated_at']) ? $data['daily_discount_rate_calculated_at'] : null;
        $this->container['daily_discount_rate_apply_on'] = isset($data['daily_discount_rate_apply_on']) ? $data['daily_discount_rate_apply_on'] : null;
        $this->container['payment_value'] = isset($data['payment_value']) ? $data['payment_value'] : null;
        $this->container['installments'] = isset($data['installments']) ? $data['installments'] : null;
        $this->container['validations'] = isset($data['validations']) ? $data['validations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Offer identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current status of the offer. You can consider it fully validated and acquired when:   - The offer status (`offer_status`) is `batched`, and;  - The acquisition status is `success` or `settled`.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets buyer_id
     *
     * @return string
     */
    public function getBuyerId()
    {
        return $this->container['buyer_id'];
    }

    /**
     * Sets buyer_id
     *
     * @param string $buyer_id Buyer identifier
     *
     * @return $this
     */
    public function setBuyerId($buyer_id)
    {
        $this->container['buyer_id'] = $buyer_id;

        return $this;
    }

    /**
     * Gets sponsor_id
     *
     * @return string
     */
    public function getSponsorId()
    {
        return $this->container['sponsor_id'];
    }

    /**
     * Sets sponsor_id
     *
     * @param string $sponsor_id Sponsor identifier
     *
     * @return $this
     */
    public function setSponsorId($sponsor_id)
    {
        $this->container['sponsor_id'] = $sponsor_id;

        return $this;
    }

    /**
     * Gets seller_id
     *
     * @return string
     */
    public function getSellerId()
    {
        return $this->container['seller_id'];
    }

    /**
     * Sets seller_id
     *
     * @param string $seller_id Sponsor identifier
     *
     * @return $this
     */
    public function setSellerId($seller_id)
    {
        $this->container['seller_id'] = $seller_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Offer creation date
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Offer latest update date
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets credit_originator_id
     *
     * @return float
     */
    public function getCreditOriginatorId()
    {
        return $this->container['credit_originator_id'];
    }

    /**
     * Sets credit_originator_id
     *
     * @param float $credit_originator_id credit originator id identifier
     *
     * @return $this
     */
    public function setCreditOriginatorId($credit_originator_id)
    {
        $this->container['credit_originator_id'] = $credit_originator_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id Offer external id (field used for the originator to keep track of the offers)
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets daily_discount_rate
     *
     * @return float
     */
    public function getDailyDiscountRate()
    {
        return $this->container['daily_discount_rate'];
    }

    /**
     * Sets daily_discount_rate
     *
     * @param float $daily_discount_rate Daily discount rate
     *
     * @return $this
     */
    public function setDailyDiscountRate($daily_discount_rate)
    {
        $this->container['daily_discount_rate'] = $daily_discount_rate;

        return $this;
    }

    /**
     * Gets daily_discount_rate_observations
     *
     * @return string
     */
    public function getDailyDiscountRateObservations()
    {
        return $this->container['daily_discount_rate_observations'];
    }

    /**
     * Sets daily_discount_rate_observations
     *
     * @param string $daily_discount_rate_observations Daily discount rate observations
     *
     * @return $this
     */
    public function setDailyDiscountRateObservations($daily_discount_rate_observations)
    {
        $this->container['daily_discount_rate_observations'] = $daily_discount_rate_observations;

        return $this;
    }

    /**
     * Gets daily_discount_rate_calculator
     *
     * @return string
     */
    public function getDailyDiscountRateCalculator()
    {
        return $this->container['daily_discount_rate_calculator'];
    }

    /**
     * Sets daily_discount_rate_calculator
     *
     * @param string $daily_discount_rate_calculator Validator used to calculate the discount rate
     *
     * @return $this
     */
    public function setDailyDiscountRateCalculator($daily_discount_rate_calculator)
    {
        $this->container['daily_discount_rate_calculator'] = $daily_discount_rate_calculator;

        return $this;
    }

    /**
     * Gets daily_discount_rate_calculated_at
     *
     * @return \DateTime
     */
    public function getDailyDiscountRateCalculatedAt()
    {
        return $this->container['daily_discount_rate_calculated_at'];
    }

    /**
     * Sets daily_discount_rate_calculated_at
     *
     * @param \DateTime $daily_discount_rate_calculated_at Discount rate calculation date
     *
     * @return $this
     */
    public function setDailyDiscountRateCalculatedAt($daily_discount_rate_calculated_at)
    {
        $this->container['daily_discount_rate_calculated_at'] = $daily_discount_rate_calculated_at;

        return $this;
    }

    /**
     * Gets daily_discount_rate_apply_on
     *
     * @return string
     */
    public function getDailyDiscountRateApplyOn()
    {
        return $this->container['daily_discount_rate_apply_on'];
    }

    /**
     * Sets daily_discount_rate_apply_on
     *
     * @param string $daily_discount_rate_apply_on Basis for calculating the discount rate
     *
     * @return $this
     */
    public function setDailyDiscountRateApplyOn($daily_discount_rate_apply_on)
    {
        $this->container['daily_discount_rate_apply_on'] = $daily_discount_rate_apply_on;

        return $this;
    }

    /**
     * Gets payment_value
     *
     * @return float
     */
    public function getPaymentValue()
    {
        return $this->container['payment_value'];
    }

    /**
     * Sets payment_value
     *
     * @param float $payment_value Amount of the invoice (in BRL).
     *
     * @return $this
     */
    public function setPaymentValue($payment_value)
    {
        $this->container['payment_value'] = $payment_value;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return object[]
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param object[] $installments installments
     *
     * @return $this
     */
    public function setInstallments($installments)
    {
        $this->container['installments'] = $installments;

        return $this;
    }

    /**
     * Gets validations
     *
     * @return object[]
     */
    public function getValidations()
    {
        return $this->container['validations'];
    }

    /**
     * Sets validations
     *
     * @param object[] $validations validations
     *
     * @return $this
     */
    public function setValidations($validations)
    {
        $this->container['validations'] = $validations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
