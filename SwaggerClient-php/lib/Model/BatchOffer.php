<?php
/**
 * BatchOffer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kanastra Tech Hub
 *
 * The Kanastra Tech Hub solution is an API/application that ease the integration between parties of credit operations in general. From the credit originator, to the investor, until the debt collector and auditing processes.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: tech@kanastra.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BatchOffer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BatchOffer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BatchOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'seller_name' => 'string',
        'seller_person_type' => 'string',
        'seller_government_id' => 'string',
        'seller_external_code' => 'string',
        'seller_address' => 'string',
        'seller_address_number' => 'string',
        'seller_address_complement' => 'string',
        'seller_neighborhood' => 'string',
        'seller_city' => 'string',
        'seller_state' => 'string',
        'seller_country' => 'string',
        'seller_zip_code' => 'string',
        'seller_bank' => 'string',
        'seller_agency' => 'string',
        'seller_agency_digit' => 'string',
        'seller_account' => 'string',
        'seller_account_digit' => 'string',
        'coobrigation' => 'bool',
        'custom_fields' => 'object',
        'items' => '\Swagger\Client\Model\BatchOfferItems[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'seller_name' => null,
        'seller_person_type' => null,
        'seller_government_id' => null,
        'seller_external_code' => null,
        'seller_address' => null,
        'seller_address_number' => null,
        'seller_address_complement' => null,
        'seller_neighborhood' => null,
        'seller_city' => null,
        'seller_state' => null,
        'seller_country' => null,
        'seller_zip_code' => null,
        'seller_bank' => null,
        'seller_agency' => null,
        'seller_agency_digit' => null,
        'seller_account' => null,
        'seller_account_digit' => null,
        'coobrigation' => null,
        'custom_fields' => null,
        'items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'seller_name' => 'sellerName',
        'seller_person_type' => 'sellerPersonType',
        'seller_government_id' => 'sellerGovernmentId',
        'seller_external_code' => 'sellerExternalCode',
        'seller_address' => 'sellerAddress',
        'seller_address_number' => 'sellerAddressNumber',
        'seller_address_complement' => 'sellerAddressComplement',
        'seller_neighborhood' => 'sellerNeighborhood',
        'seller_city' => 'sellerCity',
        'seller_state' => 'sellerState',
        'seller_country' => 'sellerCountry',
        'seller_zip_code' => 'sellerZipCode',
        'seller_bank' => 'sellerBank',
        'seller_agency' => 'sellerAgency',
        'seller_agency_digit' => 'sellerAgencyDigit',
        'seller_account' => 'sellerAccount',
        'seller_account_digit' => 'sellerAccountDigit',
        'coobrigation' => 'coobrigation',
        'custom_fields' => 'customFields',
        'items' => 'items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'seller_name' => 'setSellerName',
        'seller_person_type' => 'setSellerPersonType',
        'seller_government_id' => 'setSellerGovernmentId',
        'seller_external_code' => 'setSellerExternalCode',
        'seller_address' => 'setSellerAddress',
        'seller_address_number' => 'setSellerAddressNumber',
        'seller_address_complement' => 'setSellerAddressComplement',
        'seller_neighborhood' => 'setSellerNeighborhood',
        'seller_city' => 'setSellerCity',
        'seller_state' => 'setSellerState',
        'seller_country' => 'setSellerCountry',
        'seller_zip_code' => 'setSellerZipCode',
        'seller_bank' => 'setSellerBank',
        'seller_agency' => 'setSellerAgency',
        'seller_agency_digit' => 'setSellerAgencyDigit',
        'seller_account' => 'setSellerAccount',
        'seller_account_digit' => 'setSellerAccountDigit',
        'coobrigation' => 'setCoobrigation',
        'custom_fields' => 'setCustomFields',
        'items' => 'setItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'seller_name' => 'getSellerName',
        'seller_person_type' => 'getSellerPersonType',
        'seller_government_id' => 'getSellerGovernmentId',
        'seller_external_code' => 'getSellerExternalCode',
        'seller_address' => 'getSellerAddress',
        'seller_address_number' => 'getSellerAddressNumber',
        'seller_address_complement' => 'getSellerAddressComplement',
        'seller_neighborhood' => 'getSellerNeighborhood',
        'seller_city' => 'getSellerCity',
        'seller_state' => 'getSellerState',
        'seller_country' => 'getSellerCountry',
        'seller_zip_code' => 'getSellerZipCode',
        'seller_bank' => 'getSellerBank',
        'seller_agency' => 'getSellerAgency',
        'seller_agency_digit' => 'getSellerAgencyDigit',
        'seller_account' => 'getSellerAccount',
        'seller_account_digit' => 'getSellerAccountDigit',
        'coobrigation' => 'getCoobrigation',
        'custom_fields' => 'getCustomFields',
        'items' => 'getItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['seller_name'] = isset($data['seller_name']) ? $data['seller_name'] : null;
        $this->container['seller_person_type'] = isset($data['seller_person_type']) ? $data['seller_person_type'] : null;
        $this->container['seller_government_id'] = isset($data['seller_government_id']) ? $data['seller_government_id'] : null;
        $this->container['seller_external_code'] = isset($data['seller_external_code']) ? $data['seller_external_code'] : null;
        $this->container['seller_address'] = isset($data['seller_address']) ? $data['seller_address'] : null;
        $this->container['seller_address_number'] = isset($data['seller_address_number']) ? $data['seller_address_number'] : null;
        $this->container['seller_address_complement'] = isset($data['seller_address_complement']) ? $data['seller_address_complement'] : null;
        $this->container['seller_neighborhood'] = isset($data['seller_neighborhood']) ? $data['seller_neighborhood'] : null;
        $this->container['seller_city'] = isset($data['seller_city']) ? $data['seller_city'] : null;
        $this->container['seller_state'] = isset($data['seller_state']) ? $data['seller_state'] : null;
        $this->container['seller_country'] = isset($data['seller_country']) ? $data['seller_country'] : null;
        $this->container['seller_zip_code'] = isset($data['seller_zip_code']) ? $data['seller_zip_code'] : null;
        $this->container['seller_bank'] = isset($data['seller_bank']) ? $data['seller_bank'] : null;
        $this->container['seller_agency'] = isset($data['seller_agency']) ? $data['seller_agency'] : null;
        $this->container['seller_agency_digit'] = isset($data['seller_agency_digit']) ? $data['seller_agency_digit'] : null;
        $this->container['seller_account'] = isset($data['seller_account']) ? $data['seller_account'] : null;
        $this->container['seller_account_digit'] = isset($data['seller_account_digit']) ? $data['seller_account_digit'] : null;
        $this->container['coobrigation'] = isset($data['coobrigation']) ? $data['coobrigation'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets seller_name
     *
     * @return string
     */
    public function getSellerName()
    {
        return $this->container['seller_name'];
    }

    /**
     * Sets seller_name
     *
     * @param string $seller_name Seller name or sponsor company name. The person/company that selled and wants to sell the debt right to the fund.  ----  Razão Social ou Nome do cedente. A pessoa/empresa que irá ceder o direito de receber.
     *
     * @return $this
     */
    public function setSellerName($seller_name)
    {
        $this->container['seller_name'] = $seller_name;

        return $this;
    }

    /**
     * Gets seller_person_type
     *
     * @return string
     */
    public function getSellerPersonType()
    {
        return $this->container['seller_person_type'];
    }

    /**
     * Sets seller_person_type
     *
     * @param string $seller_person_type Seller person type. It can be: `LEGAL_PERSON` - Company `NATURAL_PERSON` - Individual person ---- Tipo de entidade do cedente. Valores possíveis são: `LEGAL_PERSON` - Pessoa jurídica `NATURAL_PERSON` - Pessoa física
     *
     * @return $this
     */
    public function setSellerPersonType($seller_person_type)
    {
        $this->container['seller_person_type'] = $seller_person_type;

        return $this;
    }

    /**
     * Gets seller_government_id
     *
     * @return string
     */
    public function getSellerGovernmentId()
    {
        return $this->container['seller_government_id'];
    }

    /**
     * Sets seller_government_id
     *
     * @param string $seller_government_id Seller's Government tax ID (a.k.a. CNPJ or CPF). Just numbers.  ----  CNPJ ou CPF do cedente. Apenas números
     *
     * @return $this
     */
    public function setSellerGovernmentId($seller_government_id)
    {
        $this->container['seller_government_id'] = $seller_government_id;

        return $this;
    }

    /**
     * Gets seller_external_code
     *
     * @return string
     */
    public function getSellerExternalCode()
    {
        return $this->container['seller_external_code'];
    }

    /**
     * Sets seller_external_code
     *
     * @param string $seller_external_code External code of the seller (for the originator control).  ----  Código externo do cedente (para controle do originador).
     *
     * @return $this
     */
    public function setSellerExternalCode($seller_external_code)
    {
        $this->container['seller_external_code'] = $seller_external_code;

        return $this;
    }

    /**
     * Gets seller_address
     *
     * @return string
     */
    public function getSellerAddress()
    {
        return $this->container['seller_address'];
    }

    /**
     * Sets seller_address
     *
     * @param string $seller_address Seller's address.  ----  Endereço do cedente.
     *
     * @return $this
     */
    public function setSellerAddress($seller_address)
    {
        $this->container['seller_address'] = $seller_address;

        return $this;
    }

    /**
     * Gets seller_address_number
     *
     * @return string
     */
    public function getSellerAddressNumber()
    {
        return $this->container['seller_address_number'];
    }

    /**
     * Sets seller_address_number
     *
     * @param string $seller_address_number Seller's address number.  ----  Número do endereço do cedente.
     *
     * @return $this
     */
    public function setSellerAddressNumber($seller_address_number)
    {
        $this->container['seller_address_number'] = $seller_address_number;

        return $this;
    }

    /**
     * Gets seller_address_complement
     *
     * @return string
     */
    public function getSellerAddressComplement()
    {
        return $this->container['seller_address_complement'];
    }

    /**
     * Sets seller_address_complement
     *
     * @param string $seller_address_complement Seller's address complement.  ----  Complemento do endereço do cedente.
     *
     * @return $this
     */
    public function setSellerAddressComplement($seller_address_complement)
    {
        $this->container['seller_address_complement'] = $seller_address_complement;

        return $this;
    }

    /**
     * Gets seller_neighborhood
     *
     * @return string
     */
    public function getSellerNeighborhood()
    {
        return $this->container['seller_neighborhood'];
    }

    /**
     * Sets seller_neighborhood
     *
     * @param string $seller_neighborhood Seller's neighborhood.  ----  Bairro do cedente.
     *
     * @return $this
     */
    public function setSellerNeighborhood($seller_neighborhood)
    {
        $this->container['seller_neighborhood'] = $seller_neighborhood;

        return $this;
    }

    /**
     * Gets seller_city
     *
     * @return string
     */
    public function getSellerCity()
    {
        return $this->container['seller_city'];
    }

    /**
     * Sets seller_city
     *
     * @param string $seller_city Sellers's city.  ----  Cidade do cedente.
     *
     * @return $this
     */
    public function setSellerCity($seller_city)
    {
        $this->container['seller_city'] = $seller_city;

        return $this;
    }

    /**
     * Gets seller_state
     *
     * @return string
     */
    public function getSellerState()
    {
        return $this->container['seller_state'];
    }

    /**
     * Sets seller_state
     *
     * @param string $seller_state Seller's state.  ----  Estado do cedente.
     *
     * @return $this
     */
    public function setSellerState($seller_state)
    {
        $this->container['seller_state'] = $seller_state;

        return $this;
    }

    /**
     * Gets seller_country
     *
     * @return string
     */
    public function getSellerCountry()
    {
        return $this->container['seller_country'];
    }

    /**
     * Sets seller_country
     *
     * @param string $seller_country Seller's country.  ----  País do cedente.
     *
     * @return $this
     */
    public function setSellerCountry($seller_country)
    {
        $this->container['seller_country'] = $seller_country;

        return $this;
    }

    /**
     * Gets seller_zip_code
     *
     * @return string
     */
    public function getSellerZipCode()
    {
        return $this->container['seller_zip_code'];
    }

    /**
     * Sets seller_zip_code
     *
     * @param string $seller_zip_code Sponsor's zip code.  ----  CEP do sacado.
     *
     * @return $this
     */
    public function setSellerZipCode($seller_zip_code)
    {
        $this->container['seller_zip_code'] = $seller_zip_code;

        return $this;
    }

    /**
     * Gets seller_bank
     *
     * @return string
     */
    public function getSellerBank()
    {
        return $this->container['seller_bank'];
    }

    /**
     * Sets seller_bank
     *
     * @param string $seller_bank Seller's bank code (brazilian format). For reference: [https://bank.codes/numero-do-banco/bank/page/2/](https://bank.codes/numero-do-banco/bank/page/2/)  ----  Código do banco do cedente.
     *
     * @return $this
     */
    public function setSellerBank($seller_bank)
    {
        $this->container['seller_bank'] = $seller_bank;

        return $this;
    }

    /**
     * Gets seller_agency
     *
     * @return string
     */
    public function getSellerAgency()
    {
        return $this->container['seller_agency'];
    }

    /**
     * Sets seller_agency
     *
     * @param string $seller_agency Seller's bank agency code (without last digit).  ----  Código da agência bancária do cedente (Sem o dígito).
     *
     * @return $this
     */
    public function setSellerAgency($seller_agency)
    {
        $this->container['seller_agency'] = $seller_agency;

        return $this;
    }

    /**
     * Gets seller_agency_digit
     *
     * @return string
     */
    public function getSellerAgencyDigit()
    {
        return $this->container['seller_agency_digit'];
    }

    /**
     * Sets seller_agency_digit
     *
     * @param string $seller_agency_digit Seller's bank agency last digit.  ----  Dígito da agência bancária do cedente.
     *
     * @return $this
     */
    public function setSellerAgencyDigit($seller_agency_digit)
    {
        $this->container['seller_agency_digit'] = $seller_agency_digit;

        return $this;
    }

    /**
     * Gets seller_account
     *
     * @return string
     */
    public function getSellerAccount()
    {
        return $this->container['seller_account'];
    }

    /**
     * Sets seller_account
     *
     * @param string $seller_account Seller's bank account code (without last digit).  ----  Conta corrente do cedente (Sem o dígito).
     *
     * @return $this
     */
    public function setSellerAccount($seller_account)
    {
        $this->container['seller_account'] = $seller_account;

        return $this;
    }

    /**
     * Gets seller_account_digit
     *
     * @return string
     */
    public function getSellerAccountDigit()
    {
        return $this->container['seller_account_digit'];
    }

    /**
     * Sets seller_account_digit
     *
     * @param string $seller_account_digit Seller's bank account last digit.  ----  Dígito da conta corrente do cedente.
     *
     * @return $this
     */
    public function setSellerAccountDigit($seller_account_digit)
    {
        $this->container['seller_account_digit'] = $seller_account_digit;

        return $this;
    }

    /**
     * Gets coobrigation
     *
     * @return bool
     */
    public function getCoobrigation()
    {
        return $this->container['coobrigation'];
    }

    /**
     * Sets coobrigation
     *
     * @param bool $coobrigation The seller has co obrigation to pay in case of default? (true = yes, false = no).  ----  Co-obrigação por parte do cedente? (true = sim, false = não).
     *
     * @return $this
     */
    public function setCoobrigation($coobrigation)
    {
        $this->container['coobrigation'] = $coobrigation;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object $custom_fields This field can be an object containing information agreed and required by the regulation of the fund and that's also very specific to the fund business model.  ----  Espaço para especificar informações acordadas no regulamento p/ validar condições de cessão e/ou criterio de elegibilidade.
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\BatchOfferItems[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\BatchOfferItems[] $items This array contains a list of objects with information of the invoice/transaction.  ----  Esse array contém uma lista de objetos com informações da nota/duplicata/operação/transação.
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
