<?php
/**
 * OfferReturnFormat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kanastra Tech Hub
 *
 * The Kanastra Tech Hub solution is an API/application that ease the integration between parties of credit operations in general. From the credit originator, to the investor, until the debt collector and auditing processes.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: tech@kanastra.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OfferReturnFormat Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfferReturnFormat implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OfferReturnFormat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'external_id' => 'string',
        'offer_id' => 'string',
        'acquisition_id' => 'string',
        'acquisition_price' => 'float',
        'future_amount' => 'float',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'offer_status' => 'string',
        'acquisition_status' => 'string',
        'validations_with_error' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'external_id' => null,
        'offer_id' => null,
        'acquisition_id' => null,
        'acquisition_price' => null,
        'future_amount' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'offer_status' => null,
        'acquisition_status' => null,
        'validations_with_error' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_id' => 'external_id',
        'offer_id' => 'offer_id',
        'acquisition_id' => 'acquisition_id',
        'acquisition_price' => 'acquisition_price',
        'future_amount' => 'future_amount',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'offer_status' => 'offer_status',
        'acquisition_status' => 'acquisition_status',
        'validations_with_error' => 'validations_with_error'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_id' => 'setExternalId',
        'offer_id' => 'setOfferId',
        'acquisition_id' => 'setAcquisitionId',
        'acquisition_price' => 'setAcquisitionPrice',
        'future_amount' => 'setFutureAmount',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'offer_status' => 'setOfferStatus',
        'acquisition_status' => 'setAcquisitionStatus',
        'validations_with_error' => 'setValidationsWithError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_id' => 'getExternalId',
        'offer_id' => 'getOfferId',
        'acquisition_id' => 'getAcquisitionId',
        'acquisition_price' => 'getAcquisitionPrice',
        'future_amount' => 'getFutureAmount',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'offer_status' => 'getOfferStatus',
        'acquisition_status' => 'getAcquisitionStatus',
        'validations_with_error' => 'getValidationsWithError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OFFER_STATUS_RECEIVED = 'received';
    const OFFER_STATUS_PRE_VALIDATED = 'pre-validated';
    const OFFER_STATUS_VALIDATED = 'validated';
    const OFFER_STATUS_INVALID = 'invalid';
    const ACQUISITION_STATUS_OPEN = 'open';
    const ACQUISITION_STATUS_SUBMITTED = 'submitted';
    const ACQUISITION_STATUS_SENT = 'sent';
    const ACQUISITION_STATUS_APPROVED_BY_MANAGER = 'approved_by_manager';
    const ACQUISITION_STATUS_WAITING_CONSULTANCY_APPROVAL = 'waiting_consultancy_approval';
    const ACQUISITION_STATUS_WAITING_MANAGER_APPROVAL = 'waiting_manager_approval';
    const ACQUISITION_STATUS_AWAITING_SIGNATURE = 'awaiting_signature';
    const ACQUISITION_STATUS_SIGNED_BY_ALL_PARTIES = 'signed_by_all_parties';
    const ACQUISITION_STATUS_PAID_TO_SELLER = 'paid_to_seller';
    const ACQUISITION_STATUS_CANCELED = 'canceled';
    const ACQUISITION_STATUS_ACQUIRED = 'acquired';
    const ACQUISITION_STATUS_INVALID = 'invalid';
    const ACQUISITION_STATUS_UNAPPROVED = 'unapproved';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOfferStatusAllowableValues()
    {
        return [
            self::OFFER_STATUS_RECEIVED,
            self::OFFER_STATUS_PRE_VALIDATED,
            self::OFFER_STATUS_VALIDATED,
            self::OFFER_STATUS_INVALID,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcquisitionStatusAllowableValues()
    {
        return [
            self::ACQUISITION_STATUS_OPEN,
            self::ACQUISITION_STATUS_SUBMITTED,
            self::ACQUISITION_STATUS_SENT,
            self::ACQUISITION_STATUS_APPROVED_BY_MANAGER,
            self::ACQUISITION_STATUS_WAITING_CONSULTANCY_APPROVAL,
            self::ACQUISITION_STATUS_WAITING_MANAGER_APPROVAL,
            self::ACQUISITION_STATUS_AWAITING_SIGNATURE,
            self::ACQUISITION_STATUS_SIGNED_BY_ALL_PARTIES,
            self::ACQUISITION_STATUS_PAID_TO_SELLER,
            self::ACQUISITION_STATUS_CANCELED,
            self::ACQUISITION_STATUS_ACQUIRED,
            self::ACQUISITION_STATUS_INVALID,
            self::ACQUISITION_STATUS_UNAPPROVED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['acquisition_id'] = isset($data['acquisition_id']) ? $data['acquisition_id'] : null;
        $this->container['acquisition_price'] = isset($data['acquisition_price']) ? $data['acquisition_price'] : null;
        $this->container['future_amount'] = isset($data['future_amount']) ? $data['future_amount'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['offer_status'] = isset($data['offer_status']) ? $data['offer_status'] : null;
        $this->container['acquisition_status'] = isset($data['acquisition_status']) ? $data['acquisition_status'] : null;
        $this->container['validations_with_error'] = isset($data['validations_with_error']) ? $data['validations_with_error'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOfferStatusAllowableValues();
        if (!is_null($this->container['offer_status']) && !in_array($this->container['offer_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'offer_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAcquisitionStatusAllowableValues();
        if (!is_null($this->container['acquisition_status']) && !in_array($this->container['acquisition_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'acquisition_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id Offer external id (field used for the originator to keep track of the offers)
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets offer_id
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param string $offer_id Offer identifier
     *
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets acquisition_id
     *
     * @return string
     */
    public function getAcquisitionId()
    {
        return $this->container['acquisition_id'];
    }

    /**
     * Sets acquisition_id
     *
     * @param string $acquisition_id Acquisition remittance identifier
     *
     * @return $this
     */
    public function setAcquisitionId($acquisition_id)
    {
        $this->container['acquisition_id'] = $acquisition_id;

        return $this;
    }

    /**
     * Gets acquisition_price
     *
     * @return float
     */
    public function getAcquisitionPrice()
    {
        return $this->container['acquisition_price'];
    }

    /**
     * Sets acquisition_price
     *
     * @param float $acquisition_price The price of acquisition (will return `null` if not acquired yet)
     *
     * @return $this
     */
    public function setAcquisitionPrice($acquisition_price)
    {
        $this->container['acquisition_price'] = $acquisition_price;

        return $this;
    }

    /**
     * Gets future_amount
     *
     * @return float
     */
    public function getFutureAmount()
    {
        return $this->container['future_amount'];
    }

    /**
     * Sets future_amount
     *
     * @param float $future_amount The price that the asset will reach in the future (will return `null` if not acquired yet)
     *
     * @return $this
     */
    public function setFutureAmount($future_amount)
    {
        $this->container['future_amount'] = $future_amount;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Offer creation date
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Offer latest update date
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets offer_status
     *
     * @return string
     */
    public function getOfferStatus()
    {
        return $this->container['offer_status'];
    }

    /**
     * Sets offer_status
     *
     * @param string $offer_status The current status of the offer. You can consider it fully validated and acquired when:   - The offer status (`offer_status`) is `validated`, and;  - The acquisition status is `acquired`.
     *
     * @return $this
     */
    public function setOfferStatus($offer_status)
    {
        $allowedValues = $this->getOfferStatusAllowableValues();
        if (!is_null($offer_status) && !in_array($offer_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'offer_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['offer_status'] = $offer_status;

        return $this;
    }

    /**
     * Gets acquisition_status
     *
     * @return string
     */
    public function getAcquisitionStatus()
    {
        return $this->container['acquisition_status'];
    }

    /**
     * Sets acquisition_status
     *
     * @param string $acquisition_status The current status of the acquisition. You can consider it fully validated and acquired when:   - The offer status (`offer_status`) is `validated`, and;  - The acquisition status is `acquired`.
     *
     * @return $this
     */
    public function setAcquisitionStatus($acquisition_status)
    {
        $allowedValues = $this->getAcquisitionStatusAllowableValues();
        if (!is_null($acquisition_status) && !in_array($acquisition_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'acquisition_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['acquisition_status'] = $acquisition_status;

        return $this;
    }

    /**
     * Gets validations_with_error
     *
     * @return string[]
     */
    public function getValidationsWithError()
    {
        return $this->container['validations_with_error'];
    }

    /**
     * Sets validations_with_error
     *
     * @param string[] $validations_with_error validations_with_error
     *
     * @return $this
     */
    public function setValidationsWithError($validations_with_error)
    {
        $this->container['validations_with_error'] = $validations_with_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
