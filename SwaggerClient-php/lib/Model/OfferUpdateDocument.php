<?php
/**
 * OfferUpdateDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kanastra Tech Hub
 *
 * The Kanastra Tech Hub solution is an API/application that ease the integration between parties of credit operations in general. From the credit originator, to the investor, until the debt collector and auditing processes.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: tech@kanastra.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OfferUpdateDocument Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfferUpdateDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OfferUpdateDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sponsor_address' => 'string',
        'sponsor_address_number' => 'string',
        'sponsor_address_complement' => 'string',
        'sponsor_neighborhood' => 'string',
        'sponsor_city' => 'string',
        'sponsor_state' => 'string',
        'sponsor_zip_code' => 'string',
        'sponsor_cellphone' => 'string',
        'billing_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sponsor_address' => null,
        'sponsor_address_number' => null,
        'sponsor_address_complement' => null,
        'sponsor_neighborhood' => null,
        'sponsor_city' => null,
        'sponsor_state' => null,
        'sponsor_zip_code' => null,
        'sponsor_cellphone' => null,
        'billing_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sponsor_address' => 'sponsorAddress',
        'sponsor_address_number' => 'sponsorAddressNumber',
        'sponsor_address_complement' => 'sponsorAddressComplement',
        'sponsor_neighborhood' => 'sponsorNeighborhood',
        'sponsor_city' => 'sponsorCity',
        'sponsor_state' => 'sponsorState',
        'sponsor_zip_code' => 'sponsorZipCode',
        'sponsor_cellphone' => 'sponsorCellphone',
        'billing_status' => 'billingStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sponsor_address' => 'setSponsorAddress',
        'sponsor_address_number' => 'setSponsorAddressNumber',
        'sponsor_address_complement' => 'setSponsorAddressComplement',
        'sponsor_neighborhood' => 'setSponsorNeighborhood',
        'sponsor_city' => 'setSponsorCity',
        'sponsor_state' => 'setSponsorState',
        'sponsor_zip_code' => 'setSponsorZipCode',
        'sponsor_cellphone' => 'setSponsorCellphone',
        'billing_status' => 'setBillingStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sponsor_address' => 'getSponsorAddress',
        'sponsor_address_number' => 'getSponsorAddressNumber',
        'sponsor_address_complement' => 'getSponsorAddressComplement',
        'sponsor_neighborhood' => 'getSponsorNeighborhood',
        'sponsor_city' => 'getSponsorCity',
        'sponsor_state' => 'getSponsorState',
        'sponsor_zip_code' => 'getSponsorZipCode',
        'sponsor_cellphone' => 'getSponsorCellphone',
        'billing_status' => 'getBillingStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sponsor_address'] = isset($data['sponsor_address']) ? $data['sponsor_address'] : null;
        $this->container['sponsor_address_number'] = isset($data['sponsor_address_number']) ? $data['sponsor_address_number'] : null;
        $this->container['sponsor_address_complement'] = isset($data['sponsor_address_complement']) ? $data['sponsor_address_complement'] : null;
        $this->container['sponsor_neighborhood'] = isset($data['sponsor_neighborhood']) ? $data['sponsor_neighborhood'] : null;
        $this->container['sponsor_city'] = isset($data['sponsor_city']) ? $data['sponsor_city'] : null;
        $this->container['sponsor_state'] = isset($data['sponsor_state']) ? $data['sponsor_state'] : null;
        $this->container['sponsor_zip_code'] = isset($data['sponsor_zip_code']) ? $data['sponsor_zip_code'] : null;
        $this->container['sponsor_cellphone'] = isset($data['sponsor_cellphone']) ? $data['sponsor_cellphone'] : null;
        $this->container['billing_status'] = isset($data['billing_status']) ? $data['billing_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sponsor_address'] === null) {
            $invalidProperties[] = "'sponsor_address' can't be null";
        }
        if ($this->container['sponsor_address_number'] === null) {
            $invalidProperties[] = "'sponsor_address_number' can't be null";
        }
        if ($this->container['sponsor_address_complement'] === null) {
            $invalidProperties[] = "'sponsor_address_complement' can't be null";
        }
        if ($this->container['sponsor_neighborhood'] === null) {
            $invalidProperties[] = "'sponsor_neighborhood' can't be null";
        }
        if ($this->container['sponsor_city'] === null) {
            $invalidProperties[] = "'sponsor_city' can't be null";
        }
        if ($this->container['sponsor_state'] === null) {
            $invalidProperties[] = "'sponsor_state' can't be null";
        }
        if ($this->container['sponsor_zip_code'] === null) {
            $invalidProperties[] = "'sponsor_zip_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sponsor_address
     *
     * @return string
     */
    public function getSponsorAddress()
    {
        return $this->container['sponsor_address'];
    }

    /**
     * Sets sponsor_address
     *
     * @param string $sponsor_address Address sponsor
     *
     * @return $this
     */
    public function setSponsorAddress($sponsor_address)
    {
        $this->container['sponsor_address'] = $sponsor_address;

        return $this;
    }

    /**
     * Gets sponsor_address_number
     *
     * @return string
     */
    public function getSponsorAddressNumber()
    {
        return $this->container['sponsor_address_number'];
    }

    /**
     * Sets sponsor_address_number
     *
     * @param string $sponsor_address_number Address number
     *
     * @return $this
     */
    public function setSponsorAddressNumber($sponsor_address_number)
    {
        $this->container['sponsor_address_number'] = $sponsor_address_number;

        return $this;
    }

    /**
     * Gets sponsor_address_complement
     *
     * @return string
     */
    public function getSponsorAddressComplement()
    {
        return $this->container['sponsor_address_complement'];
    }

    /**
     * Sets sponsor_address_complement
     *
     * @param string $sponsor_address_complement Address complement
     *
     * @return $this
     */
    public function setSponsorAddressComplement($sponsor_address_complement)
    {
        $this->container['sponsor_address_complement'] = $sponsor_address_complement;

        return $this;
    }

    /**
     * Gets sponsor_neighborhood
     *
     * @return string
     */
    public function getSponsorNeighborhood()
    {
        return $this->container['sponsor_neighborhood'];
    }

    /**
     * Sets sponsor_neighborhood
     *
     * @param string $sponsor_neighborhood Address neighborhood
     *
     * @return $this
     */
    public function setSponsorNeighborhood($sponsor_neighborhood)
    {
        $this->container['sponsor_neighborhood'] = $sponsor_neighborhood;

        return $this;
    }

    /**
     * Gets sponsor_city
     *
     * @return string
     */
    public function getSponsorCity()
    {
        return $this->container['sponsor_city'];
    }

    /**
     * Sets sponsor_city
     *
     * @param string $sponsor_city Address city
     *
     * @return $this
     */
    public function setSponsorCity($sponsor_city)
    {
        $this->container['sponsor_city'] = $sponsor_city;

        return $this;
    }

    /**
     * Gets sponsor_state
     *
     * @return string
     */
    public function getSponsorState()
    {
        return $this->container['sponsor_state'];
    }

    /**
     * Sets sponsor_state
     *
     * @param string $sponsor_state Address state
     *
     * @return $this
     */
    public function setSponsorState($sponsor_state)
    {
        $this->container['sponsor_state'] = $sponsor_state;

        return $this;
    }

    /**
     * Gets sponsor_zip_code
     *
     * @return string
     */
    public function getSponsorZipCode()
    {
        return $this->container['sponsor_zip_code'];
    }

    /**
     * Sets sponsor_zip_code
     *
     * @param string $sponsor_zip_code Address zipcode
     *
     * @return $this
     */
    public function setSponsorZipCode($sponsor_zip_code)
    {
        $this->container['sponsor_zip_code'] = $sponsor_zip_code;

        return $this;
    }

    /**
     * Gets sponsor_cellphone
     *
     * @return string
     */
    public function getSponsorCellphone()
    {
        return $this->container['sponsor_cellphone'];
    }

    /**
     * Sets sponsor_cellphone
     *
     * @param string $sponsor_cellphone Address cellphone
     *
     * @return $this
     */
    public function setSponsorCellphone($sponsor_cellphone)
    {
        $this->container['sponsor_cellphone'] = $sponsor_cellphone;

        return $this;
    }

    /**
     * Gets billing_status
     *
     * @return string
     */
    public function getBillingStatus()
    {
        return $this->container['billing_status'];
    }

    /**
     * Sets billing_status
     *
     * @param string $billing_status billing_status
     *
     * @return $this
     */
    public function setBillingStatus($billing_status)
    {
        $this->container['billing_status'] = $billing_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
