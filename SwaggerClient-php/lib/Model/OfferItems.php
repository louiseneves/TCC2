<?php
/**
 * OfferItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kanastra Tech Hub
 *
 * The Kanastra Tech Hub solution is an API/application that ease the integration between parties of credit operations in general. From the credit originator, to the investor, until the debt collector and auditing processes.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: tech@kanastra.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OfferItems Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfferItems implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Offer_items';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'asset_type' => 'string',
        'invoice_number' => 'string',
        'invoice_date' => 'string',
        'invoice_key' => 'string',
        'total_installments' => 'float',
        'payment_value' => 'float',
        'payment_date' => 'string',
        'custom_fields' => 'object',
        'files' => '\Swagger\Client\Model\OfferFile',
        'installments' => '\Swagger\Client\Model\OfferInstallments[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'asset_type' => null,
        'invoice_number' => null,
        'invoice_date' => null,
        'invoice_key' => null,
        'total_installments' => null,
        'payment_value' => null,
        'payment_date' => null,
        'custom_fields' => null,
        'files' => null,
        'installments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset_type' => 'assetType',
        'invoice_number' => 'invoiceNumber',
        'invoice_date' => 'invoiceDate',
        'invoice_key' => 'invoiceKey',
        'total_installments' => 'totalInstallments',
        'payment_value' => 'paymentValue',
        'payment_date' => 'paymentDate',
        'custom_fields' => 'customFields',
        'files' => 'files',
        'installments' => 'installments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asset_type' => 'setAssetType',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_date' => 'setInvoiceDate',
        'invoice_key' => 'setInvoiceKey',
        'total_installments' => 'setTotalInstallments',
        'payment_value' => 'setPaymentValue',
        'payment_date' => 'setPaymentDate',
        'custom_fields' => 'setCustomFields',
        'files' => 'setFiles',
        'installments' => 'setInstallments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asset_type' => 'getAssetType',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_date' => 'getInvoiceDate',
        'invoice_key' => 'getInvoiceKey',
        'total_installments' => 'getTotalInstallments',
        'payment_value' => 'getPaymentValue',
        'payment_date' => 'getPaymentDate',
        'custom_fields' => 'getCustomFields',
        'files' => 'getFiles',
        'installments' => 'getInstallments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asset_type'] = isset($data['asset_type']) ? $data['asset_type'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['invoice_key'] = isset($data['invoice_key']) ? $data['invoice_key'] : null;
        $this->container['total_installments'] = isset($data['total_installments']) ? $data['total_installments'] : null;
        $this->container['payment_value'] = isset($data['payment_value']) ? $data['payment_value'] : null;
        $this->container['payment_date'] = isset($data['payment_date']) ? $data['payment_date'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['installments'] = isset($data['installments']) ? $data['installments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asset_type
     *
     * @return string
     */
    public function getAssetType()
    {
        return $this->container['asset_type'];
    }

    /**
     * Sets asset_type
     *
     * @param string $asset_type Asset type. It can be:   - `DUPLICATA_MERCANTIL` - Mercantile duplicate  - `CHEQUE` - Check  - `CONTRATO_DIGITAL` - Digital contract  - `CONTRATO_FISICO` - Physical contract  - `MULTIPLOS` - Multiple  - `NOTA_SERVICO` - Brazilian services invoice  - `CARTAO_CREDITO` - Credit card  - `DIREITOS_CREDITORIOS` - Debt rights  - `ARRANJO_PAGAMENTO` - Payment scheme  - `CEDULA_CREDITO_BANCARIO` - Bank credit note  - `CEDULA_PRODUTOR_RURAL_FINANCEIRA` - Rural producer financial note  - `NOTA_COMERCIAL` - Commercial note  - `CONFISSAO_DIVIDA` - Confissão de Dívida  - `CCB_DIGITAL_VEICULOS_PRE` - CCB Digital Vehicles PRE  - `CEDULA_CREDITO_IMOBILIARIO` - Real Estate Credit Note  - `CCB_DIGITAL_CONSIGNADO_PRIVADO_PRE` - CCB Digital Private Consigned PRE  - `ASSISTENCIA_FINANCEIRA` - Financial Assistance  ---- Tipo do ativo. Valores possíveis são:   - `DUPLICATA_MERCANTIL` - Duplicata mercantil  - `CHEQUE` - Cheque  - `CONTRATO_DIGITAL` - Contrato digital  - `CONTRATO_FISICO` - Contrato físico  - `MULTIPLOS` - Múltiplos  - `NOTA_SERVICOS` - Nota Fiscal de Serviço  - `CARTAO_CREDITO` - Cartão de Crédito  - `DIREITOS_CREDITORIOS` - Direitos Creditórios  - `ARRANJO_PAGAMENTO` - Arranjo de pagamento  - `CEDULA_CREDITO_BANCARIO` - Cédula de crédito bancário  - `CEDULA_PRODUTOR_RURAL_FINANCEIRA` - Cédula de produtor rural financeira  - `NOTA_COMERCIAL` - Nota comercial  - `CONFISSAO_DIVIDA` - Confissão de Dívida  - `CCB_DIGITAL_VEICULOS_PRE` - CCB Digital Veiculos PRE  - `CEDULA_CREDITO_IMOBILIARIO` - Cédula de Crédito Imobiliário  - `CCB_DIGITAL_CONSIGNADO_PRIVADO_PRE` - CCB Digital Consignado Privado PRE  - `ASSISTENCIA_FINANCEIRA` - Assistência Financeira
     *
     * @return $this
     */
    public function setAssetType($asset_type)
    {
        $this->container['asset_type'] = $asset_type;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number Invoice number  ----  Número do título.
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return string
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param string $invoice_date Invoice date (format `YYYYMMDD`).  ----  Data do título (Formato `YYYYMMDD`).
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets invoice_key
     *
     * @return string
     */
    public function getInvoiceKey()
    {
        return $this->container['invoice_key'];
    }

    /**
     * Sets invoice_key
     *
     * @param string $invoice_key Electronic key of the invoice (usually for brazilian invoices only, for validation purposes).  ----  Chave eletrônica do título.
     *
     * @return $this
     */
    public function setInvoiceKey($invoice_key)
    {
        $this->container['invoice_key'] = $invoice_key;

        return $this;
    }

    /**
     * Gets total_installments
     *
     * @return float
     */
    public function getTotalInstallments()
    {
        return $this->container['total_installments'];
    }

    /**
     * Sets total_installments
     *
     * @param float $total_installments Total of monthly installments that this invoice will be divided into. Used only when the invoice will be divided into 2 or more monthly payments. When is a one payment only (bullet), the default is 1.  ----  Total de parcelas referente ao título. Utilizado apenas quando o título é pago de forma parcelada. Quando é pago de forma à vista o valor default é 1.
     *
     * @return $this
     */
    public function setTotalInstallments($total_installments)
    {
        $this->container['total_installments'] = $total_installments;

        return $this;
    }

    /**
     * Gets payment_value
     *
     * @return float
     */
    public function getPaymentValue()
    {
        return $this->container['payment_value'];
    }

    /**
     * Sets payment_value
     *
     * @param float $payment_value Amount of the invoice (in BRL).  ----  Valor do título (em BRL).
     *
     * @return $this
     */
    public function setPaymentValue($payment_value)
    {
        $this->container['payment_value'] = $payment_value;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return string
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param string $payment_date The due date of the first installment. (Format: `YYYYMMDD`). It needs to be at least 2 business days after today.  ----  Data do vencimento da primeira parcela do título. Formato: YYYYMMDD Tem que ser pelo menos 2 dias pra frente.
     *
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object $custom_fields This field can be an object containing information agreed and required by the regulation of the fund and that's also very specific to the fund business model.  ----  Espaço para especificar informações acordadas no regulamento p/ validar condições de cessão e/ou critério de elegibilidade.
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Swagger\Client\Model\OfferFile
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Swagger\Client\Model\OfferFile $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \Swagger\Client\Model\OfferInstallments[]
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \Swagger\Client\Model\OfferInstallments[] $installments A list of installments and their attributes.  ---  Uma lista contendo as parcelas e seus atributos.
     *
     * @return $this
     */
    public function setInstallments($installments)
    {
        $this->container['installments'] = $installments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
