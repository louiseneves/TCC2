<?php
/**
 * RepurchaseOffer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kanastra Tech Hub
 *
 * The Kanastra Tech Hub solution is an API/application that ease the integration between parties of credit operations in general. From the credit originator, to the investor, until the debt collector and auditing processes.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: tech@kanastra.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RepurchaseOffer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RepurchaseOffer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RepurchaseOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'offer_external_id' => 'string',
        'new_offer_external_id' => 'string',
        'offer_expected_amount' => 'float',
        'reason' => 'string',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'offer_external_id' => null,
        'new_offer_external_id' => null,
        'offer_expected_amount' => null,
        'reason' => null,
        'description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offer_external_id' => 'offerExternalId',
        'new_offer_external_id' => 'newOfferExternalId',
        'offer_expected_amount' => 'offerExpectedAmount',
        'reason' => 'reason',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offer_external_id' => 'setOfferExternalId',
        'new_offer_external_id' => 'setNewOfferExternalId',
        'offer_expected_amount' => 'setOfferExpectedAmount',
        'reason' => 'setReason',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offer_external_id' => 'getOfferExternalId',
        'new_offer_external_id' => 'getNewOfferExternalId',
        'offer_expected_amount' => 'getOfferExpectedAmount',
        'reason' => 'getReason',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offer_external_id'] = isset($data['offer_external_id']) ? $data['offer_external_id'] : null;
        $this->container['new_offer_external_id'] = isset($data['new_offer_external_id']) ? $data['new_offer_external_id'] : null;
        $this->container['offer_expected_amount'] = isset($data['offer_expected_amount']) ? $data['offer_expected_amount'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['offer_external_id'] === null) {
            $invalidProperties[] = "'offer_external_id' can't be null";
        }
        if ($this->container['new_offer_external_id'] === null) {
            $invalidProperties[] = "'new_offer_external_id' can't be null";
        }
        if ($this->container['offer_expected_amount'] === null) {
            $invalidProperties[] = "'offer_expected_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offer_external_id
     *
     * @return string
     */
    public function getOfferExternalId()
    {
        return $this->container['offer_external_id'];
    }

    /**
     * Sets offer_external_id
     *
     * @param string $offer_external_id Offer External Id of the asset to repurchase  ----  O External Id da Oferta a ser recomprada
     *
     * @return $this
     */
    public function setOfferExternalId($offer_external_id)
    {
        $this->container['offer_external_id'] = $offer_external_id;

        return $this;
    }

    /**
     * Gets new_offer_external_id
     *
     * @return string
     */
    public function getNewOfferExternalId()
    {
        return $this->container['new_offer_external_id'];
    }

    /**
     * Sets new_offer_external_id
     *
     * @param string $new_offer_external_id Offer External Id of the new Offer  ----  O External Id da nova Oferta
     *
     * @return $this
     */
    public function setNewOfferExternalId($new_offer_external_id)
    {
        $this->container['new_offer_external_id'] = $new_offer_external_id;

        return $this;
    }

    /**
     * Gets offer_expected_amount
     *
     * @return float
     */
    public function getOfferExpectedAmount()
    {
        return $this->container['offer_expected_amount'];
    }

    /**
     * Sets offer_expected_amount
     *
     * @param float $offer_expected_amount The repurchased amount of the Offer  ----  O valor recomprado da Oferta
     *
     * @return $this
     */
    public function setOfferExpectedAmount($offer_expected_amount)
    {
        $this->container['offer_expected_amount'] = $offer_expected_amount;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason The reason of the repurchase    - `COMMERCIAL_CHANGES`   - `DISQUALIFICATION`  ----  O motivo da recompra    - `COMMERCIAL_CHANGES`   - `DISQUALIFICATION`
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The reason of the repurchase  ----  O motivo da recompra
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
