<?php
/**
 * Repurchase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kanastra Tech Hub
 *
 * The Kanastra Tech Hub solution is an API/application that ease the integration between parties of credit operations in general. From the credit originator, to the investor, until the debt collector and auditing processes.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: tech@kanastra.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Repurchase Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Repurchase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Repurchase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'external_id' => 'string',
        'expected_amount' => 'float',
        'reason' => 'string',
        'description' => 'string',
        'type' => 'string',
        'with_reactivation' => 'bool',
        'new_external_id' => 'array[]',
        'files' => '\Swagger\Client\Model\IncomingFile'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'external_id' => null,
        'expected_amount' => null,
        'reason' => null,
        'description' => null,
        'type' => null,
        'with_reactivation' => null,
        'new_external_id' => null,
        'files' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_id' => 'externalId',
        'expected_amount' => 'expectedAmount',
        'reason' => 'reason',
        'description' => 'description',
        'type' => 'type',
        'with_reactivation' => 'withReactivation',
        'new_external_id' => 'newExternalId',
        'files' => 'files'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_id' => 'setExternalId',
        'expected_amount' => 'setExpectedAmount',
        'reason' => 'setReason',
        'description' => 'setDescription',
        'type' => 'setType',
        'with_reactivation' => 'setWithReactivation',
        'new_external_id' => 'setNewExternalId',
        'files' => 'setFiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_id' => 'getExternalId',
        'expected_amount' => 'getExpectedAmount',
        'reason' => 'getReason',
        'description' => 'getDescription',
        'type' => 'getType',
        'with_reactivation' => 'getWithReactivation',
        'new_external_id' => 'getNewExternalId',
        'files' => 'getFiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['expected_amount'] = isset($data['expected_amount']) ? $data['expected_amount'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['with_reactivation'] = isset($data['with_reactivation']) ? $data['with_reactivation'] : null;
        $this->container['new_external_id'] = isset($data['new_external_id']) ? $data['new_external_id'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['external_id'] === null) {
            $invalidProperties[] = "'external_id' can't be null";
        }
        if ($this->container['expected_amount'] === null) {
            $invalidProperties[] = "'expected_amount' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id Asset External Id of the asset to repurchase  ----  O External Id do título a ser recomprado
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets expected_amount
     *
     * @return float
     */
    public function getExpectedAmount()
    {
        return $this->container['expected_amount'];
    }

    /**
     * Sets expected_amount
     *
     * @param float $expected_amount The repurchased amount  ----  O valor recomprado
     *
     * @return $this
     */
    public function setExpectedAmount($expected_amount)
    {
        $this->container['expected_amount'] = $expected_amount;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason The reason of the repurchase    - `COMMERCIAL_CHANGES`   - `DISQUALIFICATION`  ----  O motivo da recompra    - `COMMERCIAL_CHANGES`   - `DISQUALIFICATION`
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The reason of the repurchase  ----  O motivo da recompra
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the repurchase    - `CASH`   - `ACQUISITION`  ----    - `CASH`   - `ACQUISITION`  O tipo da recompra
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets with_reactivation
     *
     * @return bool
     */
    public function getWithReactivation()
    {
        return $this->container['with_reactivation'];
    }

    /**
     * Sets with_reactivation
     *
     * @param bool $with_reactivation Optional field. It must be sent when repurchasing assets that are paid and need to be reactivated.  ----  Campo opcional. Deve ser enviado quando a recompra for de títulos que estão pagos e precisam ser reativados.
     *
     * @return $this
     */
    public function setWithReactivation($with_reactivation)
    {
        $this->container['with_reactivation'] = $with_reactivation;

        return $this;
    }

    /**
     * Gets new_external_id
     *
     * @return array[]
     */
    public function getNewExternalId()
    {
        return $this->container['new_external_id'];
    }

    /**
     * Sets new_external_id
     *
     * @param array[] $new_external_id Optional field. New External Id of the asset to repurchase  ----  Campo opcional. O Novo External Id do título a ser recomprado
     *
     * @return $this
     */
    public function setNewExternalId($new_external_id)
    {
        $this->container['new_external_id'] = $new_external_id;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Swagger\Client\Model\IncomingFile
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Swagger\Client\Model\IncomingFile $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
