<?php
/**
 * SellerLegalPerson
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kanastra Tech Hub
 *
 * The Kanastra Tech Hub solution is an API/application that ease the integration between parties of credit operations in general. From the credit originator, to the investor, until the debt collector and auditing processes.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: tech@kanastra.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SellerLegalPerson Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SellerLegalPerson implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SellerLegalPerson';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'person_type' => 'string',
        'asset_types' => 'string[]',
        'government_id' => 'string',
        'name' => 'string',
        'address' => '\Swagger\Client\Model\SellerAddress',
        'phone' => 'string',
        'email' => 'string',
        'bank_accounts' => '\Swagger\Client\Model\OneOfSellerLegalPersonBankAccountsItems[]',
        'representatives' => '\Swagger\Client\Model\SellerRepresentativeLegalPerson[]',
        'guarantors' => '\Swagger\Client\Model\SellerGuarantor[]',
        'custom_fields' => '\Swagger\Client\Model\SellerCustomField'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'person_type' => null,
        'asset_types' => null,
        'government_id' => null,
        'name' => null,
        'address' => null,
        'phone' => null,
        'email' => null,
        'bank_accounts' => null,
        'representatives' => null,
        'guarantors' => null,
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'person_type' => 'personType',
        'asset_types' => 'assetTypes',
        'government_id' => 'governmentId',
        'name' => 'name',
        'address' => 'address',
        'phone' => 'phone',
        'email' => 'email',
        'bank_accounts' => 'bankAccounts',
        'representatives' => 'representatives',
        'guarantors' => 'guarantors',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'person_type' => 'setPersonType',
        'asset_types' => 'setAssetTypes',
        'government_id' => 'setGovernmentId',
        'name' => 'setName',
        'address' => 'setAddress',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'bank_accounts' => 'setBankAccounts',
        'representatives' => 'setRepresentatives',
        'guarantors' => 'setGuarantors',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'person_type' => 'getPersonType',
        'asset_types' => 'getAssetTypes',
        'government_id' => 'getGovernmentId',
        'name' => 'getName',
        'address' => 'getAddress',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'bank_accounts' => 'getBankAccounts',
        'representatives' => 'getRepresentatives',
        'guarantors' => 'getGuarantors',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['person_type'] = isset($data['person_type']) ? $data['person_type'] : 'LEGAL_PERSON';
        $this->container['asset_types'] = isset($data['asset_types']) ? $data['asset_types'] : null;
        $this->container['government_id'] = isset($data['government_id']) ? $data['government_id'] : '44870662000198';
        $this->container['name'] = isset($data['name']) ? $data['name'] : 'Kanastra Company';
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : '3432124453';
        $this->container['email'] = isset($data['email']) ? $data['email'] : 'contato@kanastra.com.br';
        $this->container['bank_accounts'] = isset($data['bank_accounts']) ? $data['bank_accounts'] : null;
        $this->container['representatives'] = isset($data['representatives']) ? $data['representatives'] : null;
        $this->container['guarantors'] = isset($data['guarantors']) ? $data['guarantors'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['person_type'] === null) {
            $invalidProperties[] = "'person_type' can't be null";
        }
        if ($this->container['asset_types'] === null) {
            $invalidProperties[] = "'asset_types' can't be null";
        }
        if ($this->container['government_id'] === null) {
            $invalidProperties[] = "'government_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['bank_accounts'] === null) {
            $invalidProperties[] = "'bank_accounts' can't be null";
        }
        if ($this->container['representatives'] === null) {
            $invalidProperties[] = "'representatives' can't be null";
        }
        if ($this->container['custom_fields'] === null) {
            $invalidProperties[] = "'custom_fields' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets person_type
     *
     * @return string
     */
    public function getPersonType()
    {
        return $this->container['person_type'];
    }

    /**
     * Sets person_type
     *
     * @param string $person_type The type of the seller.
     *
     * @return $this
     */
    public function setPersonType($person_type)
    {
        $this->container['person_type'] = $person_type;

        return $this;
    }

    /**
     * Gets asset_types
     *
     * @return string[]
     */
    public function getAssetTypes()
    {
        return $this->container['asset_types'];
    }

    /**
     * Sets asset_types
     *
     * @param string[] $asset_types Asset type. It can be:   - `DUPLICATA_MERCANTIL` - Mercantile duplicate  - `CHEQUE` - Check  - `CONTRATO_DIGITAL` - Digital contract  - `CONTRATO_FISICO` - Physical contract  - `MULTIPLOS` - Multiple  - `NOTA_SERVICOS` - Brazilian services invoice  - `CARTAO_CREDITO` - Credit card  - `DIREITOS_CREDITORIOS` - Debt rights  - `ARRANJO_PAGAMENTO` - Payment scheme  - `CEDULA_CREDITO_BANCARIO` - Bank credit note  - `CEDULA_PRODUTOR_RURAL_FINANCEIRA` - Financial Rural Producer Certificate  - `NOTA_COMERCIAL` - Commercial note  - `ASSISTENCIA_FINANCEIRA` - Financial Assistance  ---- Tipo do ativo. Valores possíveis são:   - `DUPLICATA_MERCANTIL` - Duplicata mercantil  - `CHEQUE` - Cheque  - `CONTRATO_DIGITAL` - Contrato digital  - `CONTRATO_FISICO` - Contrato físico  - `MULTIPLOS` - Múltiplos  - `NOTA_SERVICOS` - Nota Fiscal de Serviço  - `CARTAO_CREDITO` - Cartão de Crédito  - `DIREITOS_CREDITORIOS` - Direitos Creditórios  - `ARRANJO_PAGAMENTO` - Arranjo de pagamento  - `CEDULA_CREDITO_BANCARIO` - Cédula de Crédito Bancário  - `CEDULA_PRODUTOR_RURAL_FINANCEIRA` - Cédula de Produtor Rural Financeira  - `NOTA_COMERCIAL` - Nota comercial  - `ASSISTENCIA_FINANCEIRA` - Assistência Financeira
     *
     * @return $this
     */
    public function setAssetTypes($asset_types)
    {
        $this->container['asset_types'] = $asset_types;

        return $this;
    }

    /**
     * Gets government_id
     *
     * @return string
     */
    public function getGovernmentId()
    {
        return $this->container['government_id'];
    }

    /**
     * Sets government_id
     *
     * @param string $government_id The CNPJ of the seller.
     *
     * @return $this
     */
    public function setGovernmentId($government_id)
    {
        $this->container['government_id'] = $government_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The seller's name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\SellerAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\SellerAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone The seller' phone.
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The seller's email.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets bank_accounts
     *
     * @return \Swagger\Client\Model\OneOfSellerLegalPersonBankAccountsItems[]
     */
    public function getBankAccounts()
    {
        return $this->container['bank_accounts'];
    }

    /**
     * Sets bank_accounts
     *
     * @param \Swagger\Client\Model\OneOfSellerLegalPersonBankAccountsItems[] $bank_accounts bank_accounts
     *
     * @return $this
     */
    public function setBankAccounts($bank_accounts)
    {
        $this->container['bank_accounts'] = $bank_accounts;

        return $this;
    }

    /**
     * Gets representatives
     *
     * @return \Swagger\Client\Model\SellerRepresentativeLegalPerson[]
     */
    public function getRepresentatives()
    {
        return $this->container['representatives'];
    }

    /**
     * Sets representatives
     *
     * @param \Swagger\Client\Model\SellerRepresentativeLegalPerson[] $representatives representatives
     *
     * @return $this
     */
    public function setRepresentatives($representatives)
    {
        $this->container['representatives'] = $representatives;

        return $this;
    }

    /**
     * Gets guarantors
     *
     * @return \Swagger\Client\Model\SellerGuarantor[]
     */
    public function getGuarantors()
    {
        return $this->container['guarantors'];
    }

    /**
     * Sets guarantors
     *
     * @param \Swagger\Client\Model\SellerGuarantor[] $guarantors guarantors
     *
     * @return $this
     */
    public function setGuarantors($guarantors)
    {
        $this->container['guarantors'] = $guarantors;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \Swagger\Client\Model\SellerCustomField
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \Swagger\Client\Model\SellerCustomField $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
