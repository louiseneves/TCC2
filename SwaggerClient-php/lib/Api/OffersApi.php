<?php
/**
 * OffersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kanastra Tech Hub
 *
 * The Kanastra Tech Hub solution is an API/application that ease the integration between parties of credit operations in general. From the credit originator, to the investor, until the debt collector and auditing processes.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: tech@kanastra.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * OffersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OffersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersBatchPost
     *
     * EN: Create offers from a batch. | PT: Cria offers a partir de um lote.
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  \Swagger\Client\Model\BatchOffer $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BatchOfferResponse
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersBatchPost($credit_originator_id, $body = null)
    {
        list($response) = $this->apiCreditOriginatorsCreditOriginatorIdOffersBatchPostWithHttpInfo($credit_originator_id, $body);
        return $response;
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersBatchPostWithHttpInfo
     *
     * EN: Create offers from a batch. | PT: Cria offers a partir de um lote.
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  \Swagger\Client\Model\BatchOffer $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BatchOfferResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersBatchPostWithHttpInfo($credit_originator_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\BatchOfferResponse';
        $request = $this->apiCreditOriginatorsCreditOriginatorIdOffersBatchPostRequest($credit_originator_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BatchOfferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersBatchPostAsync
     *
     * EN: Create offers from a batch. | PT: Cria offers a partir de um lote.
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  \Swagger\Client\Model\BatchOffer $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersBatchPostAsync($credit_originator_id, $body = null)
    {
        return $this->apiCreditOriginatorsCreditOriginatorIdOffersBatchPostAsyncWithHttpInfo($credit_originator_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersBatchPostAsyncWithHttpInfo
     *
     * EN: Create offers from a batch. | PT: Cria offers a partir de um lote.
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  \Swagger\Client\Model\BatchOffer $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersBatchPostAsyncWithHttpInfo($credit_originator_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\BatchOfferResponse';
        $request = $this->apiCreditOriginatorsCreditOriginatorIdOffersBatchPostRequest($credit_originator_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiCreditOriginatorsCreditOriginatorIdOffersBatchPost'
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  \Swagger\Client\Model\BatchOffer $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiCreditOriginatorsCreditOriginatorIdOffersBatchPostRequest($credit_originator_id, $body = null)
    {
        // verify the required parameter 'credit_originator_id' is set
        if ($credit_originator_id === null || (is_array($credit_originator_id) && count($credit_originator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_originator_id when calling apiCreditOriginatorsCreditOriginatorIdOffersBatchPost'
            );
        }

        $resourcePath = '/api/credit-originators/{creditOriginatorId}/offers/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_originator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditOriginatorId' . '}',
                ObjectSerializer::toPathValue($credit_originator_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatch
     *
     * EN: Update sponsor offer | PT: Atualiza o sacado da offer
     *
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $external_id The external Id of the offer.  ----  O external Id da oferta. (required)
     * @param  \Swagger\Client\Model\OfferUpdateDocument $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OfferReturnUpdateDocument
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatch($credit_originator_id, $external_id, $body = null)
    {
        list($response) = $this->apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatchWithHttpInfo($credit_originator_id, $external_id, $body);
        return $response;
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatchWithHttpInfo
     *
     * EN: Update sponsor offer | PT: Atualiza o sacado da offer
     *
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $external_id The external Id of the offer.  ----  O external Id da oferta. (required)
     * @param  \Swagger\Client\Model\OfferUpdateDocument $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OfferReturnUpdateDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatchWithHttpInfo($credit_originator_id, $external_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\OfferReturnUpdateDocument';
        $request = $this->apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatchRequest($credit_originator_id, $external_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OfferReturnUpdateDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OfferErrorDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatchAsync
     *
     * EN: Update sponsor offer | PT: Atualiza o sacado da offer
     *
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $external_id The external Id of the offer.  ----  O external Id da oferta. (required)
     * @param  \Swagger\Client\Model\OfferUpdateDocument $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatchAsync($credit_originator_id, $external_id, $body = null)
    {
        return $this->apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatchAsyncWithHttpInfo($credit_originator_id, $external_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatchAsyncWithHttpInfo
     *
     * EN: Update sponsor offer | PT: Atualiza o sacado da offer
     *
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $external_id The external Id of the offer.  ----  O external Id da oferta. (required)
     * @param  \Swagger\Client\Model\OfferUpdateDocument $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatchAsyncWithHttpInfo($credit_originator_id, $external_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\OfferReturnUpdateDocument';
        $request = $this->apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatchRequest($credit_originator_id, $external_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatch'
     *
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $external_id The external Id of the offer.  ----  O external Id da oferta. (required)
     * @param  \Swagger\Client\Model\OfferUpdateDocument $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatchRequest($credit_originator_id, $external_id, $body = null)
    {
        // verify the required parameter 'credit_originator_id' is set
        if ($credit_originator_id === null || (is_array($credit_originator_id) && count($credit_originator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_originator_id when calling apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatch'
            );
        }
        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling apiCreditOriginatorsCreditOriginatorIdOffersExternalIdPatch'
            );
        }

        $resourcePath = '/api/credit-originators/{creditOriginatorId}/offers/{externalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_originator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditOriginatorId' . '}',
                ObjectSerializer::toPathValue($credit_originator_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalId' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatch
     *
     * EN: Returns the status of the invalid offer | PT: Retorna o status da offer inválidada
     *
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $offer_id The identificator of the offer.  ----  O identificador da oferta. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OfferReturnFormatInvalid[]
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatch($credit_originator_id, $offer_id)
    {
        list($response) = $this->apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatchWithHttpInfo($credit_originator_id, $offer_id);
        return $response;
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatchWithHttpInfo
     *
     * EN: Returns the status of the invalid offer | PT: Retorna o status da offer inválidada
     *
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $offer_id The identificator of the offer.  ----  O identificador da oferta. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OfferReturnFormatInvalid[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatchWithHttpInfo($credit_originator_id, $offer_id)
    {
        $returnType = '\Swagger\Client\Model\OfferReturnFormatInvalid[]';
        $request = $this->apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatchRequest($credit_originator_id, $offer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OfferReturnFormatInvalid[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatchAsync
     *
     * EN: Returns the status of the invalid offer | PT: Retorna o status da offer inválidada
     *
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $offer_id The identificator of the offer.  ----  O identificador da oferta. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatchAsync($credit_originator_id, $offer_id)
    {
        return $this->apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatchAsyncWithHttpInfo($credit_originator_id, $offer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatchAsyncWithHttpInfo
     *
     * EN: Returns the status of the invalid offer | PT: Retorna o status da offer inválidada
     *
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $offer_id The identificator of the offer.  ----  O identificador da oferta. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatchAsyncWithHttpInfo($credit_originator_id, $offer_id)
    {
        $returnType = '\Swagger\Client\Model\OfferReturnFormatInvalid[]';
        $request = $this->apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatchRequest($credit_originator_id, $offer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatch'
     *
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $offer_id The identificator of the offer.  ----  O identificador da oferta. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatchRequest($credit_originator_id, $offer_id)
    {
        // verify the required parameter 'credit_originator_id' is set
        if ($credit_originator_id === null || (is_array($credit_originator_id) && count($credit_originator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_originator_id when calling apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatch'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling apiCreditOriginatorsCreditOriginatorIdOffersOfferIdInvalidPatch'
            );
        }

        $resourcePath = '/api/credit-originators/{creditOriginatorId}/offers/{offerId}/invalid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_originator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditOriginatorId' . '}',
                ObjectSerializer::toPathValue($credit_originator_id),
                $resourcePath
            );
        }
        // path params
        if ($offer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerId' . '}',
                ObjectSerializer::toPathValue($offer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGet
     *
     * EN: Get the offer information | PT: Retorna as informações da oferta
     *
     * @param  string $credit_originator_id The identifier or slug (human-friendly identifier) of the originator  ----  O identificador do originador (required)
     * @param  string $offer_id_or_external_id The &#x60;offer&#x60;identifier.  ----  O identificador da oferta. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OfferDetailsResponse
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGet($credit_originator_id, $offer_id_or_external_id)
    {
        list($response) = $this->apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGetWithHttpInfo($credit_originator_id, $offer_id_or_external_id);
        return $response;
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGetWithHttpInfo
     *
     * EN: Get the offer information | PT: Retorna as informações da oferta
     *
     * @param  string $credit_originator_id The identifier or slug (human-friendly identifier) of the originator  ----  O identificador do originador (required)
     * @param  string $offer_id_or_external_id The &#x60;offer&#x60;identifier.  ----  O identificador da oferta. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OfferDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGetWithHttpInfo($credit_originator_id, $offer_id_or_external_id)
    {
        $returnType = '\Swagger\Client\Model\OfferDetailsResponse';
        $request = $this->apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGetRequest($credit_originator_id, $offer_id_or_external_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OfferDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGetAsync
     *
     * EN: Get the offer information | PT: Retorna as informações da oferta
     *
     * @param  string $credit_originator_id The identifier or slug (human-friendly identifier) of the originator  ----  O identificador do originador (required)
     * @param  string $offer_id_or_external_id The &#x60;offer&#x60;identifier.  ----  O identificador da oferta. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGetAsync($credit_originator_id, $offer_id_or_external_id)
    {
        return $this->apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGetAsyncWithHttpInfo($credit_originator_id, $offer_id_or_external_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGetAsyncWithHttpInfo
     *
     * EN: Get the offer information | PT: Retorna as informações da oferta
     *
     * @param  string $credit_originator_id The identifier or slug (human-friendly identifier) of the originator  ----  O identificador do originador (required)
     * @param  string $offer_id_or_external_id The &#x60;offer&#x60;identifier.  ----  O identificador da oferta. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGetAsyncWithHttpInfo($credit_originator_id, $offer_id_or_external_id)
    {
        $returnType = '\Swagger\Client\Model\OfferDetailsResponse';
        $request = $this->apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGetRequest($credit_originator_id, $offer_id_or_external_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGet'
     *
     * @param  string $credit_originator_id The identifier or slug (human-friendly identifier) of the originator  ----  O identificador do originador (required)
     * @param  string $offer_id_or_external_id The &#x60;offer&#x60;identifier.  ----  O identificador da oferta. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGetRequest($credit_originator_id, $offer_id_or_external_id)
    {
        // verify the required parameter 'credit_originator_id' is set
        if ($credit_originator_id === null || (is_array($credit_originator_id) && count($credit_originator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_originator_id when calling apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGet'
            );
        }
        // verify the required parameter 'offer_id_or_external_id' is set
        if ($offer_id_or_external_id === null || (is_array($offer_id_or_external_id) && count($offer_id_or_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id_or_external_id when calling apiCreditOriginatorsCreditOriginatorIdOffersOfferIdOrExternalIdGet'
            );
        }

        $resourcePath = '/api/credit-originators/{creditOriginatorId}/offers/{offerIdOrExternalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_originator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditOriginatorId' . '}',
                ObjectSerializer::toPathValue($credit_originator_id),
                $resourcePath
            );
        }
        // path params
        if ($offer_id_or_external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerIdOrExternalId' . '}',
                ObjectSerializer::toPathValue($offer_id_or_external_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPut
     *
     * EN: Update an offer. | PT: Atualiza uma offer.
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  string $offer_id The &#x60;offer&#x60;identifier.  ----  O identificador da oferta. (required)
     * @param  \Swagger\Client\Model\Offer $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPut($credit_originator_id, $offer_id, $body = null)
    {
        $this->apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPutWithHttpInfo($credit_originator_id, $offer_id, $body);
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPutWithHttpInfo
     *
     * EN: Update an offer. | PT: Atualiza uma offer.
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  string $offer_id The &#x60;offer&#x60;identifier.  ----  O identificador da oferta. (required)
     * @param  \Swagger\Client\Model\Offer $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPutWithHttpInfo($credit_originator_id, $offer_id, $body = null)
    {
        $returnType = '';
        $request = $this->apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPutRequest($credit_originator_id, $offer_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OfferErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPutAsync
     *
     * EN: Update an offer. | PT: Atualiza uma offer.
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  string $offer_id The &#x60;offer&#x60;identifier.  ----  O identificador da oferta. (required)
     * @param  \Swagger\Client\Model\Offer $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPutAsync($credit_originator_id, $offer_id, $body = null)
    {
        return $this->apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPutAsyncWithHttpInfo($credit_originator_id, $offer_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPutAsyncWithHttpInfo
     *
     * EN: Update an offer. | PT: Atualiza uma offer.
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  string $offer_id The &#x60;offer&#x60;identifier.  ----  O identificador da oferta. (required)
     * @param  \Swagger\Client\Model\Offer $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPutAsyncWithHttpInfo($credit_originator_id, $offer_id, $body = null)
    {
        $returnType = '';
        $request = $this->apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPutRequest($credit_originator_id, $offer_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPut'
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  string $offer_id The &#x60;offer&#x60;identifier.  ----  O identificador da oferta. (required)
     * @param  \Swagger\Client\Model\Offer $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPutRequest($credit_originator_id, $offer_id, $body = null)
    {
        // verify the required parameter 'credit_originator_id' is set
        if ($credit_originator_id === null || (is_array($credit_originator_id) && count($credit_originator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_originator_id when calling apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPut'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling apiCreditOriginatorsCreditOriginatorIdOffersOfferIdPut'
            );
        }

        $resourcePath = '/api/credit-originators/{creditOriginatorId}/offers/{offerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_originator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditOriginatorId' . '}',
                ObjectSerializer::toPathValue($credit_originator_id),
                $resourcePath
            );
        }
        // path params
        if ($offer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerId' . '}',
                ObjectSerializer::toPathValue($offer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersPost
     *
     * EN: Creates a new offer. | PT: Cria uma nova offer.
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  \Swagger\Client\Model\Offer $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OfferDetailsResponse
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersPost($credit_originator_id, $body = null)
    {
        list($response) = $this->apiCreditOriginatorsCreditOriginatorIdOffersPostWithHttpInfo($credit_originator_id, $body);
        return $response;
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersPostWithHttpInfo
     *
     * EN: Creates a new offer. | PT: Cria uma nova offer.
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  \Swagger\Client\Model\Offer $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OfferDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersPostWithHttpInfo($credit_originator_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\OfferDetailsResponse';
        $request = $this->apiCreditOriginatorsCreditOriginatorIdOffersPostRequest($credit_originator_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OfferDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OfferErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersPostAsync
     *
     * EN: Creates a new offer. | PT: Cria uma nova offer.
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  \Swagger\Client\Model\Offer $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersPostAsync($credit_originator_id, $body = null)
    {
        return $this->apiCreditOriginatorsCreditOriginatorIdOffersPostAsyncWithHttpInfo($credit_originator_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCreditOriginatorsCreditOriginatorIdOffersPostAsyncWithHttpInfo
     *
     * EN: Creates a new offer. | PT: Cria uma nova offer.
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  \Swagger\Client\Model\Offer $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCreditOriginatorsCreditOriginatorIdOffersPostAsyncWithHttpInfo($credit_originator_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\OfferDetailsResponse';
        $request = $this->apiCreditOriginatorsCreditOriginatorIdOffersPostRequest($credit_originator_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiCreditOriginatorsCreditOriginatorIdOffersPost'
     *
     * @param  string $credit_originator_id The id of the credit originator  ----  O id do originador de crédito. (required)
     * @param  \Swagger\Client\Model\Offer $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiCreditOriginatorsCreditOriginatorIdOffersPostRequest($credit_originator_id, $body = null)
    {
        // verify the required parameter 'credit_originator_id' is set
        if ($credit_originator_id === null || (is_array($credit_originator_id) && count($credit_originator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_originator_id when calling apiCreditOriginatorsCreditOriginatorIdOffersPost'
            );
        }

        $resourcePath = '/api/credit-originators/{creditOriginatorId}/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_originator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditOriginatorId' . '}',
                ObjectSerializer::toPathValue($credit_originator_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGet
     *
     * EN: Get a return snapshot of all offers of the specified date | PT: Retorna um snapshot de todas offers recebidas na data especificada
     *
     * @param  string $fund_id The identificator or slug (human-friendly identificator) of the fund  ----  O identificador do fundo (required)
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $date The base date of the report.  ----  A data base do relatório. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OfferReturnFormat[]
     */
    public function apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGet($fund_id, $credit_originator_id, $date)
    {
        list($response) = $this->apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGetWithHttpInfo($fund_id, $credit_originator_id, $date);
        return $response;
    }

    /**
     * Operation apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGetWithHttpInfo
     *
     * EN: Get a return snapshot of all offers of the specified date | PT: Retorna um snapshot de todas offers recebidas na data especificada
     *
     * @param  string $fund_id The identificator or slug (human-friendly identificator) of the fund  ----  O identificador do fundo (required)
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $date The base date of the report.  ----  A data base do relatório. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OfferReturnFormat[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGetWithHttpInfo($fund_id, $credit_originator_id, $date)
    {
        $returnType = '\Swagger\Client\Model\OfferReturnFormat[]';
        $request = $this->apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGetRequest($fund_id, $credit_originator_id, $date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OfferReturnFormat[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGetAsync
     *
     * EN: Get a return snapshot of all offers of the specified date | PT: Retorna um snapshot de todas offers recebidas na data especificada
     *
     * @param  string $fund_id The identificator or slug (human-friendly identificator) of the fund  ----  O identificador do fundo (required)
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $date The base date of the report.  ----  A data base do relatório. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGetAsync($fund_id, $credit_originator_id, $date)
    {
        return $this->apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGetAsyncWithHttpInfo($fund_id, $credit_originator_id, $date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGetAsyncWithHttpInfo
     *
     * EN: Get a return snapshot of all offers of the specified date | PT: Retorna um snapshot de todas offers recebidas na data especificada
     *
     * @param  string $fund_id The identificator or slug (human-friendly identificator) of the fund  ----  O identificador do fundo (required)
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $date The base date of the report.  ----  A data base do relatório. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGetAsyncWithHttpInfo($fund_id, $credit_originator_id, $date)
    {
        $returnType = '\Swagger\Client\Model\OfferReturnFormat[]';
        $request = $this->apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGetRequest($fund_id, $credit_originator_id, $date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGet'
     *
     * @param  string $fund_id The identificator or slug (human-friendly identificator) of the fund  ----  O identificador do fundo (required)
     * @param  string $credit_originator_id The identificator or slug (human-friendly identificator) of the originator  ----  O identificador do originador (required)
     * @param  string $date The base date of the report.  ----  A data base do relatório. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGetRequest($fund_id, $credit_originator_id, $date)
    {
        // verify the required parameter 'fund_id' is set
        if ($fund_id === null || (is_array($fund_id) && count($fund_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fund_id when calling apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGet'
            );
        }
        // verify the required parameter 'credit_originator_id' is set
        if ($credit_originator_id === null || (is_array($credit_originator_id) && count($credit_originator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_originator_id when calling apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGet'
            );
        }
        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date when calling apiFundsFundIdCreditOriginatorsCreditOriginatorIdOffersDailyReportsDateGet'
            );
        }

        $resourcePath = '/api/funds/{fundId}/credit-originators/{creditOriginatorId}/offers-daily-reports/{date}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($fund_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fundId' . '}',
                ObjectSerializer::toPathValue($fund_id),
                $resourcePath
            );
        }
        // path params
        if ($credit_originator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditOriginatorId' . '}',
                ObjectSerializer::toPathValue($credit_originator_id),
                $resourcePath
            );
        }
        // path params
        if ($date !== null) {
            $resourcePath = str_replace(
                '{' . 'date' . '}',
                ObjectSerializer::toPathValue($date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
